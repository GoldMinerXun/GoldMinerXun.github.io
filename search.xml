<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉树中和为某一值的路径</title>
      <link href="/2019/10/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(24)/"/>
      <url>/2019/10/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(24)/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p></blockquote><p>这个过程就是深度遍历的过程，用期望值减去走过的上一个节点，检查结果是否为0，若为0，则退出，反之继续遍历。每一次都是先检查左节点，再检查右节点，若左节点符合，先深度遍历左节点，之后遍历右节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindPath</span>(<span class="params">root, expectNumber</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> list=[],listAll=[];</span><br><span class="line">    <span class="keyword">return</span> find(root,expectNumber,list,listAll);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">root,expectNumber,list,listAll</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> listAll;</span><br><span class="line">    &#125;</span><br><span class="line">    list.push(root.val);</span><br><span class="line">    <span class="keyword">const</span> x=expectNumber-root.val;</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right==<span class="literal">null</span>&amp;&amp;x==<span class="number">0</span>)&#123;</span><br><span class="line">        listAll.push(<span class="built_in">Array</span>.of(...list));</span><br><span class="line">    &#125;</span><br><span class="line">    find(root.left,x,list,listAll);</span><br><span class="line">    find(root.right,x,list,listAll);</span><br><span class="line">    list.pop();</span><br><span class="line">    <span class="keyword">return</span> listAll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并二叉树</title>
      <link href="/2019/10/15/%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%20JavaScript%E7%89%88/"/>
      <url>/2019/10/15/%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%20JavaScript%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>考点：二叉树遍历，二叉树建立，多行输入，数组。<br>题目描述：<br>已知两颗二叉树，将它们合并成一颗二叉树。合并规则是：都存在的结点，就将结点值加起来，否则空的位置就由另一个树的结点来代替。例如：<br>两颗二叉树是:<br>Tree 1 ：<br>     1<br>    / \<br>   3   2<br>  /<br> 5   </p><p>Tree 2：<br>   2<br>  / <br> 1   3<br>  \   <br>   4   7</p><p>合并后的树为：<br>    3<br>   / <br>  4   5<br> / \    <br>5  4    7</p><p>输入描述：</p><blockquote><p>第一行输入整数n，m。(分别表示树1和树2的节点数,1&lt;=n，m&lt;=100)<br>接下来n行，第i行三个整数l,r,v, (0&lt;=l,r&lt;=n , 0&lt;=v&lt;=100) ,表示第一棵树的第i个结点的左儿子编号，右儿子编号和权值。<br>接下来m行，第i行三个整数l,r,v, (0&lt;=l,r&lt;=n , 0&lt;=v&lt;=100) ,表示第二棵树的第i个结点的左儿子编号，右儿子编号和权值。<br>（对于左右儿子，如果编号为0表示空。保证如果儿子不为空，则儿子编号大于父亲编号。）</p></blockquote><p>输出描述：</p><blockquote><p>输出合并后树按层遍历的各结点权值，相邻权值之间以一个空格相间。</p></blockquote><p>本题在牛客网的瓜子二手车编程题中出现，首先需要控制输入，输入是由第一行的两个数字决定接下来输入的行数。所以需要首先js的多行输入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readline=<span class="built_in">require</span>(<span class="string">'readline'</span>)</span><br><span class="line"><span class="keyword">const</span> r1=readline.createInterface(&#123;</span><br><span class="line">input:process.stdin,</span><br><span class="line">output:process.stdout</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> linesArrayIndex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> linesArray=[];</span><br><span class="line"><span class="keyword">var</span> resultArray=[];</span><br><span class="line">r1.on(<span class="string">'line'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">line</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(linesArrayIndex==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> length=line.split(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">var</span> n1=length[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> n2=length[<span class="number">1</span>];</span><br><span class="line">linesArray[linesArrayIndex]=n1+n2;</span><br><span class="line"><span class="comment">//首行加入输入流队列，并表示接下来的输入行数。</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">linesArray[linesArrayIndex]=line;</span><br><span class="line">resultArray.push(line);</span><br><span class="line">&#125;</span><br><span class="line">linesArrayIndex++;</span><br><span class="line"><span class="keyword">if</span>(resultArray.length==n1+n2)&#123;</span><br><span class="line"><span class="comment">///之后对结果数组进行的操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时得到的输入数组是</p><blockquote><p>[‘2 3 1’,’4 0 3’,’0 0 2’,’0 0 5’,’2 3 2’,’0 4 1’,’0 5 3’,’0 0 4’,’0 0 7’]</p></blockquote><p>需要将这一整个数组根据两个节点个数n1和n2分割，并转换成二叉树的数据结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringtonumberarr</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> newarr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> array)&#123;</span><br><span class="line">        <span class="keyword">let</span> temparr=i.split(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">var</span> newtemp=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> temparr)&#123;</span><br><span class="line">            j=<span class="built_in">parseInt</span>(j);</span><br><span class="line">            newtemp.push(j);</span><br><span class="line">        &#125;</span><br><span class="line">        newarr.push(newtemp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newarr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr1=[];</span><br><span class="line"><span class="keyword">let</span> arr2=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n1;i++)&#123;</span><br><span class="line">    arr1.push(resultArray[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arrone=stringtonumberarr(arr1);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n2;i++)&#123;</span><br><span class="line">    arr2.push(resultArray[i+n1]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arrtwo=stringtonumberarr(arr2);</span><br></pre></td></tr></table></figure><p>经过以上转换，数组元素不再为字符串而是数值型。</p><p>将处理过的数组转换为二叉树。</p><blockquote><p>[ [2 ,3 ,1], [4 ,0 ,3], [0 ,0 ,2], [0 ,0 ,5] ]</p></blockquote><p>我的想法是，假设数组为arr，arr[0][0]如果不为0，则表示该节点有左孩子，同理可知是否有右孩子。<br>将左右标记为true，若为0则为null。<br>然后再将节点连接，通过编号对应数组下标，找到对应的父子节点然后连接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inittree = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pRoot=<span class="keyword">new</span> Node(arr[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">// console.log(pRoot)</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>][<span class="number">0</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        pRoot.left=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>][<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        pRoot.right=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nodearr=[];</span><br><span class="line">    nodearr.push(pRoot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> node =<span class="keyword">new</span> Node(arr[i][<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(arr[i][<span class="number">0</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.left=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i][<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.right=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodearr.push(node)</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nodearr.length;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j][<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            nodearr[j].left=nodearr[arr[j][<span class="number">0</span>]<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[j][<span class="number">1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            nodearr[j].right=nodearr[arr[j][<span class="number">1</span>]<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(pRoot)</span></span><br><span class="line">    <span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将两个数组转换成二叉树之后，进行二叉树合并，合并二叉树的思想是递归。思路是新建一棵树。</p><ol><li>首先用两个指针同时指向两棵树的树根，然后从看是否都存在，若都存在，新建节点，其值为两个节点权值之和。若只有其中一个节点存在，则直接赋值然后连接。</li><li>结束该节点后再看该节点的左节点，然后再看右节点。</li><li>重复2步骤，进行递归。若到叶子节点则返回null，最外层返回根节点。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergetree</span>(<span class="params">pRoot1,pRoot2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(pRoot1!=<span class="literal">null</span>&amp;&amp;pRoot2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        temp=<span class="keyword">new</span> Node(pRoot1.val+pRoot2.val);</span><br><span class="line">        temp.left=mergetree(pRoot1.left,pRoot2.left);</span><br><span class="line">        temp.right=mergetree(pRoot1.right,pRoot2.right);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pRoot1==<span class="literal">null</span>&amp;&amp;pRoot2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        temp=pRoot2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pRoot1!=<span class="literal">null</span>&amp;&amp;pRoot2==<span class="literal">null</span>)&#123;</span><br><span class="line">        temp=pRoot1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(temp)</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后题目要求需要按层遍历输出结果<br>此处用的是非递归实现的按层遍历，需要用一个队列来放入每一层的节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leveltraver</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=[];</span><br><span class="line">    <span class="keyword">var</span> tree=[];</span><br><span class="line">    tree.push(pRoot);</span><br><span class="line">    <span class="keyword">while</span>(tree.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> node=tree.shift();</span><br><span class="line">        result.push(node.val);</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tree.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tree.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readline=<span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">const</span> r1=readline.createInterface(&#123;</span><br><span class="line">    input:process.stdin,</span><br><span class="line">    output:process.stdout</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.left=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.val=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergetree</span>(<span class="params">pRoot1,pRoot2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(pRoot1!=<span class="literal">null</span>&amp;&amp;pRoot2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        temp=<span class="keyword">new</span> Node(pRoot1.val+pRoot2.val);</span><br><span class="line">        temp.left=mergetree(pRoot1.left,pRoot2.left);</span><br><span class="line">        temp.right=mergetree(pRoot1.right,pRoot2.right);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pRoot1==<span class="literal">null</span>&amp;&amp;pRoot2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        temp=pRoot2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pRoot1!=<span class="literal">null</span>&amp;&amp;pRoot2==<span class="literal">null</span>)&#123;</span><br><span class="line">        temp=pRoot1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(temp)</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inittree = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pRoot=<span class="keyword">new</span> Node(arr[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">// console.log(pRoot)</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>][<span class="number">0</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        pRoot.left=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>][<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        pRoot.right=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nodearr=[];</span><br><span class="line">    nodearr.push(pRoot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> node =<span class="keyword">new</span> Node(arr[i][<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(arr[i][<span class="number">0</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.left=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i][<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.right=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodearr.push(node)</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nodearr.length;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j][<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            nodearr[j].left=nodearr[arr[j][<span class="number">0</span>]<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[j][<span class="number">1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            nodearr[j].right=nodearr[arr[j][<span class="number">1</span>]<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(pRoot)</span></span><br><span class="line">    <span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringtonumberarr</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newarr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> array)&#123;</span><br><span class="line">        <span class="keyword">let</span> temparr=i.split(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">var</span> newtemp=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> temparr)&#123;</span><br><span class="line">            j=<span class="built_in">parseInt</span>(j);</span><br><span class="line">            newtemp.push(j);</span><br><span class="line">        &#125;</span><br><span class="line">        newarr.push(newtemp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newarr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leveltraver</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=[];</span><br><span class="line">    <span class="keyword">var</span> tree=[];</span><br><span class="line">    tree.push(pRoot);</span><br><span class="line">    <span class="keyword">while</span>(tree.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> node=tree.shift();</span><br><span class="line">        result.push(node.val);</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tree.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tree.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> linesArray=[];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> linesArrayIndex=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> resultArray=[];</span><br><span class="line"><span class="keyword">var</span> n1,n2;</span><br><span class="line">r1.on(<span class="string">'line'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">line</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(linesArrayIndex==<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> length=line.split(<span class="string">' '</span>);</span><br><span class="line">       n1=<span class="built_in">parseInt</span>(length[<span class="number">0</span>]);</span><br><span class="line">       n2=<span class="built_in">parseInt</span>(length[<span class="number">1</span>]);</span><br><span class="line">       linesArray[linesArrayIndex]=<span class="built_in">Number</span>(length[<span class="number">0</span>])+<span class="built_in">Number</span>(length[<span class="number">1</span>]);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       linesArray[linesArrayIndex]=line;</span><br><span class="line">   &#125;</span><br><span class="line">     </span><br><span class="line">    linesArrayIndex++;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> linesArray.slice(<span class="number">1</span>))&#123;</span><br><span class="line">        resultArray[i]=linesArray.slice(<span class="number">1</span>)[i];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">if</span>(resultArray.length==linesArray[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="comment">//打印输出整合在数组resultArray中的输入内容</span></span><br><span class="line">        <span class="keyword">let</span> arr1=[];</span><br><span class="line">        <span class="keyword">let</span> arr2=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n1;i++)&#123;</span><br><span class="line">            arr1.push(resultArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> arrone=stringtonumberarr(arr1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n2;i++)&#123;</span><br><span class="line">            arr2.push(resultArray[i+n1]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> arrtwo=stringtonumberarr(arr2);</span><br><span class="line">                </span><br><span class="line">       <span class="comment">//console.log(arrone)</span></span><br><span class="line">       <span class="comment">//console.log(arrtwo)</span></span><br><span class="line">       <span class="keyword">var</span> pRoot1 = inittree(arrone);</span><br><span class="line">       <span class="keyword">var</span> pRoot2 = inittree(arrtwo);</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">var</span> resroot=mergetree(pRoot1,pRoot2);</span><br><span class="line">       <span class="keyword">var</span> ans=leveltraver(resroot);</span><br><span class="line">       <span class="built_in">console</span>.log(ans.join(<span class="string">' '</span>))</span><br><span class="line">        r1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript事件循环机制</title>
      <link href="/2019/10/14/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/10/14/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="关于事件循环"><a href="#关于事件循环" class="headerlink" title="关于事件循环"></a>关于事件循环</h4><blockquote><p>主线程从“任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制，又称为Event Loop （事件循环）。</p></blockquote><h4 id="关于执行栈"><a href="#关于执行栈" class="headerlink" title="关于执行栈"></a>关于执行栈</h4><p>当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境。这个过程反复进行，直到执行栈中的代码全部执行完毕。</p><ul><li>当代码执行的时候，同步代码按照执行顺序开始执行</li><li>当代码执行的时候，碰到函数，引擎会在栈里产生这个函数执行栈，也叫执行上下文。</li><li>当代码执行到函数的时候，会进入这个执行环境继续执行其中的代码，反复进行，全部执行完<h4 id="关于任务队列"><a href="#关于任务队列" class="headerlink" title="关于任务队列"></a>关于任务队列</h4></li><li>微任务队列（micro tasks）只会有一个</li><li>宏任务队列（macro tasks）可以有多个</li><li>click ajax 等回调方法都会进入到宏任务队列（macro tasks）中，当然也包括上面的</li><li>宏任务按顺序执行，且浏览器在每个宏任务之间渲染页面</li><li>所有微任务也按顺序执行，且在以下场景会立即执行所有微任务<ul><li>每个回调之后且js执行栈中为空。</li><li>每个宏任务结束后。</li></ul></li></ul><h4 id="关于Nodejs事件循环机制过程"><a href="#关于Nodejs事件循环机制过程" class="headerlink" title="关于Nodejs事件循环机制过程"></a>关于Nodejs事件循环机制过程</h4><p>NodeJs 的运行是这样的：</p><ul><li>初始化 Event Loop</li><li>执行您的主代码。这里同样，遇到异步处理，就会分配给对应的队列。直到主代码执行完毕。</li><li>执行主代码中出现的所有微任务：先执行完所有nextTick()，然后在执行其它所有微任务。</li><li>开始 Event Loop</li><li>当每个阶段执行完毕后，都会执行所有微任务（先 nextTick，后其它），然后再进入下一个阶段。</li></ul><h4 id="自己的小总结"><a href="#自己的小总结" class="headerlink" title="自己的小总结"></a>自己的小总结</h4><ul><li>宏任务-&gt;微任务-&gt;宏任务中的微任务</li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">    <span class="keyword">await</span> c();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1-1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'settimeout1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2-1'</span>);</span><br><span class="line">    reject();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2-2'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'settimeout2'</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'?'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise-reject'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'200'</span>);</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>promise2<br>promise2-1<br>200<br>b<br>c<br>promise1<br>promise2-2<br>promise1-1<br>c1<br>b1<br>settimeout2<br>?<br>settimeout1</p></blockquote><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/oicb/p/10615592.html" target="_blank" rel="noopener">js 异步、栈、事件循环、任务队列</a><br><a href="https://www.jianshu.com/p/dc7b2650b40d" target="_blank" rel="noopener">微任务、宏任务、立即执行函数（async await）</a><br><a href="https://www.jianshu.com/p/593fe41365e1" target="_blank" rel="noopener">浏览器内核机制、JS事件循环、Promise、Task、事件冒泡、事件委托详解</a><br><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/?utm_source=html5weekly?_blank" target="_blank" rel="noopener">强推该博客，可以看到整个过程是怎样执行的</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求1+2+3+...+n</title>
      <link href="/2019/10/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(47)/"/>
      <url>/2019/10/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(47)/</url>
      
        <content type="html"><![CDATA[<h1 id="求1-2-3-…-n"><a href="#求1-2-3-…-n" class="headerlink" title="求1+2+3+…+n"></a>求1+2+3+…+n</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p></blockquote><ul><li>递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sum_Solution</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> n&amp;&amp;Sum_Solution(n<span class="number">-1</span>)+n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树</title>
      <link href="/2019/10/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(39)/"/>
      <url>/2019/10/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(39)/</url>
      
        <content type="html"><![CDATA[<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p></blockquote><ul><li>平衡二叉树是左右深度差不超过1的二叉树，所以在遍历深度的同时需要判断是否深度差超过1。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsBalanced_Solution</span>(<span class="params">pRoot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> TreeDepth(pRoot)!==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pRoot==<span class="literal">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> leftdep=TreeDepth(pRoot.left);</span><br><span class="line">    <span class="keyword">if</span>(leftdep==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">const</span> rightdep=TreeDepth(pRoot.right);</span><br><span class="line">    <span class="keyword">if</span>(rightdep==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(leftdep-rightdep)&gt;<span class="number">1</span>? <span class="number">-1</span> : <span class="built_in">Math</span>.max(leftdep,rightdep)+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js爬虫</title>
      <link href="/2019/10/13/Node.js%E7%88%AC%E8%99%AB/"/>
      <url>/2019/10/13/Node.js%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="用nodejs爬取学校教务在线的课表"><a href="#用nodejs爬取学校教务在线的课表" class="headerlink" title="用nodejs爬取学校教务在线的课表"></a>用nodejs爬取学校教务在线的课表</h4><p>首先要分析爬虫的本质，模拟登陆+获取网页信息<br>如何模拟登陆（手动登陆）。<br>大致讲下思路。</p><ol><li>首先是找到登陆入口，从登陆入口发起登陆请求。</li><li>因为我们学校的登陆是需要验证码验证，所以我先将验证码获取到，也就是获取网页信息，处理后通过fs保存到本地，本地再渲染到前端，用户输入。</li><li>用输入的用户信息和验证码向本地后端发起post请求，用本地后端服务器向教务在线发起post请求。（为什么需要本地后端来做媒介，因为需要处理返回的字符串数据，并且需要保存）</li><li>post请求完成后根据教务返回的成功数据继续请求下一个url，也就是查看成绩的url，需要再控制台的network查看发起的各种请求，分析出到底是哪个请求url发起的查看成绩请求。</li><li>获取到成绩页面的数据后直接返回本地服务器，本地处理返回的网页格式。转成需要的格式后再存入数据库。</li></ol><hr><p>如果是自动登陆，则需要自动识别模块，nodejs有一个自动识别验证码的模块tesseract模块，但是准确率有限，所以需要不停的发起申请并验证。</p><hr><p>值得注意的是，请求时的请求头信息尽量完整，不可缺少的有url，cookie等。<br>cookie一定是上一次请求返回的response里面的setcookie，用这个cookie去请求，所以如果需要继续请求，一定要保存上一个请求的响应cookie</p><p>具体代码不贴了。<br>等我项目完成度一定高以后，将项目放到GitHub上，有问题留言或联系qq178977641。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间管理项目</title>
      <link href="/2019/10/13/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/10/13/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/GoldMinerXun/PullClassFromJW" target="_blank" rel="noopener">时间管理项目完整1.0版</a><br>node.js+express+jQuery<br>基本上没有用任何框架，原生js项目。<br>技术难点主要是爬虫技术。<br>该项目运行在3010端口。</p><hr><p>star一下叭。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>降水量问题</title>
      <link href="/2019/10/13/%E9%99%8D%E6%B0%B4%E9%87%8F%E9%97%AE%E9%A2%98%20JavaScript%E7%89%88/"/>
      <url>/2019/10/13/%E9%99%8D%E6%B0%B4%E9%87%8F%E9%97%AE%E9%A2%98%20JavaScript%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>题目描述：<br>给定n个柱面的高度，表示降雨某地n块区域的海拔高度。<br>计算降雨之后该地最大储水面积。如果低于地平线，也就是小于0，则一定积水。<br><img src="https://img-blog.csdnimg.cn/20190908123755422.png" alt="在这里插入图片描述"><br>输入描述：<br>第一行输入整数n.(1&lt;=n&lt;=10000)<br>第二行输入n个高度整数h。(-10000&lt;=h&lt;=10000)<br>输出描述：<br>积水面积。</p><p>本题思路是，需要找出墙的左边和右边，当出现凹形，则会积水，所以一定要找到墙的左边和右边，如何找到墙的右边呢？<br>根据积水坑的形状，一定是凹型，所以墙的左边一定是非递增，右边一定是非递减。<br>所以需要一个栈来存储左边，然后遇到右边的墙后，开始出栈，出栈后计算宽度和高度，得出面积。<br>由于需要宽度计算，所以入栈的是高度数组下标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trap</span>(<span class="params">height</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> n = height.length;</span><br><span class="line"><span class="keyword">var</span> stack=[];</span><br><span class="line">stack.push(cur);</span><br><span class="line"><span class="keyword">var</span> result=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cur&lt;n)&#123;</span><br><span class="line"><span class="keyword">while</span>(height[cur]&gt;height[stack[stack.length<span class="number">-1</span>]]&amp;&amp;stack.length!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> top=stack.pop();</span><br><span class="line"><span class="keyword">if</span>(stack.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> distance = cur - top;</span><br><span class="line"><span class="keyword">var</span> tempheight = <span class="built_in">Math</span>.min(height[cur],height[stack[stack.length<span class="number">-1</span>]]) - height[top];</span><br><span class="line">result+=distance*tempheight;</span><br><span class="line">&#125;</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉查找树的后序遍历序列</title>
      <link href="/2019/10/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(23)/"/>
      <url>/2019/10/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(23)/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉查找树的后序遍历序列"><a href="#二叉查找树的后序遍历序列" class="headerlink" title="二叉查找树的后序遍历序列"></a>二叉查找树的后序遍历序列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p></blockquote><p>后序遍历是指先左后右最后根，所以序列的最后是根节点。</p><ul><li>由此可推出先找到根节点</li><li>满足左子树小于根节点，右子树大于根节点</li><li>递归比较每一个节点即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VerifySquenceOfBST</span>(<span class="params">sequence</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(!sequence.length)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> judge(sequence,<span class="number">0</span>,sequence.length<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params">a,l,r</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">let</span> i = r;</span><br><span class="line">     <span class="comment">///找到左子树查找到右子树的位置i</span></span><br><span class="line">    <span class="keyword">while</span> (a[i - <span class="number">1</span>] &gt; a[r] &amp;&amp; i &gt; l) i--;</span><br><span class="line">    <span class="comment">///左子树需要全部小于根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= l; j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[r])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///满足根节点后需要继续看第二层的根节点是否也满足以上，也就是递归</span></span><br><span class="line">    <span class="keyword">return</span> judge(a,l,i<span class="number">-1</span>)&amp;&amp;judge(a,i,r<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树后序遍历</title>
      <link href="/2019/10/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%20JavaScript%E7%89%88/"/>
      <url>/2019/10/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%20JavaScript%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>题目描述：<br>代码实现二叉树的后续遍历。要求：1、不可以用递归；2、不可以用栈；3、自定义树节点的结构；4、给出测试用例；5、语言不限；<br>注意：你的方法的输入为根节点</p><p>输入描述：<br>第一行一个正整数n(1&lt;=n&lt;=100)，表示二叉树有n个结点。<br>接下来n行，第i行两个整数li,ri (0&lt;=li,ri&lt;=n) ，分别表示第i个结点的左儿子和右儿子，为0代表空。<br>保证根为1，保证输入为合法二叉树。</p><p>输出描述：<br>输出一行。输出n个数，代表后序遍历的结点的顺序，相邻两个数之间用一个空格相隔。</p><hr><p>大致思路如下，关于输入输出处理，在我另一篇关于二叉树的博客里有写：<br><a href="https://blog.csdn.net/Damp_XUN/article/details/100640372" target="_blank" rel="noopener">非递归实现二叉树遍历</a></p><p>因为不能用栈，所以对节点做调整，加入父节点属性。<br>现在有父节点，我们再来看后序遍历的顺序。首先父节点，然后向左寻找，找到左节点，然后回到该节点的上一个节点，再找其右节点，再回到该节点的上一个节点。<br>那么起码要知道，上一节点是谁。并且实时调整上一节点。<br>所以假设，我们设置一个当前节点指针pCur，一个上一节点指针pLast。<br>每一次结束，当前指针一定是指向父节点，上一节点指针一定是指向当前指针的上一个位置。<br>所以存在两者情况，要么，上一节点指针指向当前指针的左节点，要么指向右节点。<br>所以简化成最简单的情况，</p><ol><li>pLast == pCur.left </li><li>pLast == pCur.right</li></ol><p>第一种情况，由于当前while循环寻找到的一定是叶节点，则左节点一定为空，如果同时右节点存在，那么说明存在左子树，需要遍历右子树，并判断右子树是否存在左节点，这时就是重复寻找。如果不存在右子树，则直接输出当前指针指向的节点，然后回退父节点，输出父节点，回退父节点后，不需要再遍历左节点，因为左节点此时为空，所以下一轮寻找会直接判断右节点为空，即不存在右子树，输出当前节点并回退父节点。</p><p>第二种情况，说明当前遍历到右节点，则一定是右子树遍历完毕遍历到右叶子节点，所以输出，并回退父节点。</p><p>讲的有点混乱，我还是要再琢磨一下怎么更好的阐述。。。</p><p>总之就是对于一个节点，其是否有左子树，如果有左子树，则继续沿左子树方向找到左叶子节点；如果没有左子树，看是否有右子树，有右子树，则继续将右子树当作一个二叉树进行遍历；<br>如果有左叶子节点就输出左叶子节点，然后看有没有右子树，如果有则继续将右子数当作二叉树遍历；<br>如果只有右叶子节点，则输出右叶子节点；<br>然后回退，输出父节点。<br>如何判断叶子节点，则需要每次寻找子树后，如果存在子树，则需要继续沿左一直找到左叶子节点，或一直找右叶子节点。如果没有右子树或左子树，则可以输出。<br>所以本解法在没有左节点，只有右叶子节点时continue，没有继续内部while循环找叶子节点。只有在判断有子树的情况下，没有continue；</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.val = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="number">3</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">5</span>], [<span class="number">0</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>]];</span><br><span class="line"><span class="keyword">var</span> initTree2 = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pRoot = <span class="keyword">new</span> node(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> queue = [];</span><br><span class="line">    queue.push(pRoot);</span><br><span class="line">    <span class="keyword">while</span> (queue.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> pCur = queue.shift();</span><br><span class="line">        <span class="built_in">console</span>.log(pCur.val)</span><br><span class="line">        <span class="keyword">var</span> i = pCur.val - <span class="number">1</span>;</span><br><span class="line">        pCur.left =<span class="keyword">new</span> node(arr[i][<span class="number">0</span>]);</span><br><span class="line">        pCur.left.parent=pCur;</span><br><span class="line">        pCur.right = <span class="keyword">new</span> node(arr[i][<span class="number">1</span>]);</span><br><span class="line">        pCur.right.parent=pCur;</span><br><span class="line">        <span class="keyword">if</span> (pCur.left.val != <span class="number">0</span>) &#123;</span><br><span class="line">           </span><br><span class="line">            queue.push(pCur.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pCur.right.val != <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            queue.push(pCur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pRoot2=initTree2(arr);</span><br><span class="line"><span class="built_in">console</span>.log(pRoot2)</span><br><span class="line"><span class="keyword">var</span> postOrder = <span class="function"><span class="keyword">function</span> (<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pCur=pRoot;</span><br><span class="line">    <span class="keyword">var</span> pLast=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(pCur)&#123;</span><br><span class="line">    <span class="comment">//    console.log(1)</span></span><br><span class="line">       <span class="keyword">if</span>(pCur.left==pLast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pCur.right.val!=<span class="number">0</span>)&#123;</span><br><span class="line">                pCur=pCur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pLast=pCur;</span><br><span class="line">                <span class="built_in">console</span>.log(pCur.val);</span><br><span class="line">                pCur=pCur.parent;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pCur.right==pLast)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(pCur.val)</span><br><span class="line">            pLast=pCur;</span><br><span class="line">            pCur=pCur.parent;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(pCur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">           pCur=pCur.left</span><br><span class="line">       &#125;</span><br><span class="line">       pLast=pCur;</span><br><span class="line">       pCur=pCur.parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">postOrder(pRoot2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的子结构</title>
      <link href="/2019/09/19/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(17)/"/>
      <url>/2019/09/19/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(17)/</url>
      
        <content type="html"><![CDATA[<h3 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p></blockquote><p>重复两步，采用递归</p><ol><li>根节点是否相同</li><li>相同检查剩余节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HasSubtree</span>(<span class="params">pRoot1, pRoot2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> res=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(pRoot1===<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(pRoot2===<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(pRoot1.val==pRoot2.val) res=tree1hastree2(pRoot1,pRoot2)</span><br><span class="line">    <span class="keyword">if</span>(!res)res=HasSubtree(pRoot1.left,pRoot2)</span><br><span class="line">    <span class="keyword">if</span>(!res)res=HasSubtree(pRoot1.right,pRoot2)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree1hastree2</span>(<span class="params">pRoot1,pRoot2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pRoot2===<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(pRoot1===<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(pRoot1.val!==pRoot2.val)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> tree1hastree2(pRoot1.left,pRoot2.left)&amp;&amp;tree1hastree2(pRoot1.right,pRoot2.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变态跳台阶</title>
      <link href="/2019/09/18/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(9)/"/>
      <url>/2019/09/18/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(9)/</url>
      
        <content type="html"><![CDATA[<h3 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p>根据跳台阶的解法，jump(n)=jump(n-1)+jump(n-2)<br>此处可跳台阶为1~n，所以jump(n)=jump(n-1)+jump(n-2)+…+jump(1)<br>由数学推算得：<br>jump(n)=jump(n-1)+jump(n-2)+…+jump(1)—————–[1]<br>jump(n-1)=jump(n-2)+jump(n-3)+…+jump(1)————–[2]<br>[1]-[2]==&gt;  jump(n)=2* jump(n-1)</p><p>jump(1)=1<br>jump(2)=2<em>1<br>jump(3)=2</em>2<em>1<br>jump(4)=2</em>2<em>2</em>1<br>…<br>jump(n)=2^(n-1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(--number)&#123;</span><br><span class="line">        i*=<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂链表的复制</title>
      <link href="/2019/09/17/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(25)/"/>
      <url>/2019/09/17/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(25)/</url>
      
        <content type="html"><![CDATA[<h3 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h3><ul><li>先复制链表，通过map保存对应的新链表节点和原链表节点，然后复制random链表指针。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomListNode</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.label = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.random = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clone</span>(<span class="params">pHead</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pHead==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> m=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> p=pHead;</span><br><span class="line">    <span class="keyword">let</span> p2=<span class="keyword">new</span> RandomListNode(pHead.label);</span><br><span class="line">    <span class="keyword">const</span> pHead2=p2;</span><br><span class="line">    map.set(p,p2)</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p.next)p2.next=<span class="keyword">new</span> RandomListNode(p.next.label);</span><br><span class="line">        <span class="keyword">else</span> p2.next=<span class="literal">null</span>;</span><br><span class="line">        p=p.next;</span><br><span class="line">        p2=p2.next;</span><br><span class="line">        m.set(p,p2)</span><br><span class="line">    &#125;</span><br><span class="line">    p=pHead;</span><br><span class="line">    p2=pHead2;</span><br><span class="line">    <span class="keyword">while</span>(p!==<span class="literal">null</span>)&#123;</span><br><span class="line">        p2.random=m.get(p.random);</span><br><span class="line">        p=p.next;</span><br><span class="line">        p2=p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扑克牌顺子</title>
      <link href="/2019/09/13/%E5%89%91%E6%8C%87offerJavaScript%E7%89%88%20(45)/"/>
      <url>/2019/09/13/%E5%89%91%E6%8C%87offerJavaScript%E7%89%88%20(45)/</url>
      
        <content type="html"><![CDATA[<h1 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a>扑克牌顺子</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsContinuous</span>(<span class="params">numbers</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(numbers.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b&#125;);</span><br><span class="line">    <span class="keyword">let</span> interval=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> zero=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;numbers.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            interval+=(numbers[i+<span class="number">1</span>]-numbers[i]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(numbers[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            zero++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(interval&gt;zero||interval&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages + NexT在win10个人博客</title>
      <link href="/2019/09/13/github+hexo+next%20%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2019/09/13/github+hexo+next%20%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<ul><li>踩了很多坑，找到一个大佬写的教程，但是还是有坑。</li><li>要注意目录，千万别乱npm</li><li>在仓库里面添加ssh时要记得给写权限 ，allow write access</li><li>注意在yml文件里面改配置，还有仓库的地址是:不是/</li><li>每次修改完任何文件，需要以下操作才能发布到GitHub上<blockquote><p>hexo g<br>hexo d<br>hexo clean<br>hexo d -g</p></blockquote></li></ul><p>分享大佬链接，按照大佬的顺序来，别踩坑，踩就是一小时<br><a href="https://blog.csdn.net/qq_34229391/article/details/82251852" target="_blank" rel="noopener">Hexo + GitHub Pages + NexT在win10上搭建个性化个人博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型链</title>
      <link href="/2019/09/13/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/09/13/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><p>在js中，只有一种结构，对象。</p><p>每个实例对象都有自己的私有属性：__ proto __，这个属性是只有实例可以访问得到的，这个属性指向它的构造函数的原型对象，这个原型对象还有它的原型对象，直至其原型对象为null，null没有原型对象，这个链式关系就终止了。这就是原型链。</p><h3 id="Prototype和proto"><a href="#Prototype和proto" class="headerlink" title="Prototype和proto"></a>Prototype和<strong>proto</strong></h3><p>通过prototype定义的属性，会向上定义。定义到它的原型对象上去。<br>通过<strong>proto</strong>定义的属性，会变成其私有属性，不被原型读取；</p><p>当查看某个对象是否有某属性时，需要通过原型链逐级向上读取。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>构造器就是指向这个实例对象的构造函数。</p><blockquote><p>constructor 和 instanceof<br>两者在于一个时找构造器，一个是判断构造函数的prototype属性是否出现在某个对象的原型链上</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式匹配</title>
      <link href="/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(52)/"/>
      <url>/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(52)/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p></blockquote><ul><li>第二个字符为”*”<ul><li>第一个字符为”.”或为等于s此时的字符</li><li>第一个字符不为”.”且第一个字符也不匹配s此时的字符</li></ul></li><li>第二个字符不为”*”<ul><li>第一个字符为”.”或第一个字符匹配s此时的字符</li></ul></li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params">s, pattern</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">null</span>||pattern==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> matchrecursive(s,<span class="number">0</span>,pattern,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchrecursive</span>(<span class="params">str,istr,pattern,ipattern</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.length==istr&amp;&amp;pattern.length==ipattern)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(str.length!=istr&amp;&amp;pattern.length==ipattern)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pattern[ipattern+<span class="number">1</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pattern[ipattern]==<span class="string">'.'</span>&amp;&amp;istr!=str.length||pattern[ipattern]==str[istr])&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                matchrecursive(str,istr+<span class="number">1</span>,pattern,ipattern+<span class="number">2</span>)||</span><br><span class="line">                matchrecursive(str,istr+<span class="number">1</span>,pattern,ipattern)||</span><br><span class="line">                matchrecursive(str,istr,pattern,ipattern+<span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matchrecursive(str,istr,pattern,ipattern+<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pattern[ipattern]==<span class="string">'.'</span>&amp;&amp;istr!=str.length||pattern[ipattern]==str[istr])&#123;</span><br><span class="line">        <span class="keyword">return</span> matchrecursive(str,istr+<span class="number">1</span>,pattern,ipattern+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为S的连续正整数序列</title>
      <link href="/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(41)/"/>
      <url>/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(41)/</url>
      
        <content type="html"><![CDATA[<h1 id="和为S的连续正整数序列"><a href="#和为S的连续正整数序列" class="headerlink" title="和为S的连续正整数序列"></a>和为S的连续正整数序列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序</p></li><li><p>由求和公式得 (i+1)<em>(2</em>a+i)/2=sum;我们只需要找出对应的a和i</p></li><li><p>若只有两个数，则最大的为折半的数，比如s=89，两个数字组成的序列为 44，45</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindContinuousSequence</span>(<span class="params">sum</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="comment">//(i+1)*(2*a+i)=2*sum;</span></span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">1</span>,a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> res=[];</span><br><span class="line">    <span class="keyword">let</span> half=sum&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(half--)&#123;</span><br><span class="line">        a++;</span><br><span class="line">        i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((i+<span class="number">1</span>)*(<span class="number">2</span>*a+i)&lt;<span class="number">2</span>*sum)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>)*(<span class="number">2</span>*a+i)==<span class="number">2</span>*sum)&#123;</span><br><span class="line">            <span class="keyword">const</span> tmp=[]</span><br><span class="line">            tmp.push(i);</span><br><span class="line">            tmp.push(a);</span><br><span class="line">            res.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reslist=[]</span><br><span class="line">    <span class="keyword">let</span> temp=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt; res.length;j++)&#123;</span><br><span class="line">        <span class="keyword">var</span> a1=res[j][<span class="number">1</span>]</span><br><span class="line">        temp=[]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;=res[j][<span class="number">0</span>];k++)&#123;</span><br><span class="line">            temp.push(a1);</span><br><span class="line">            a1++;</span><br><span class="line">        &#125;</span><br><span class="line">        reslist.push(temp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reslist</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子串模糊匹配</title>
      <link href="/2019/09/13/%E5%AD%97%E4%B8%B2%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%20JavaScript%E7%89%88/"/>
      <url>/2019/09/13/%E5%AD%97%E4%B8%B2%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%20JavaScript%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="子串模糊匹配"><a href="#子串模糊匹配" class="headerlink" title="子串模糊匹配"></a>子串模糊匹配</h2><ul><li><p>从字符串string开始完整匹配子串sub，返回匹配到的字符个数。</p></li><li><p>sub中如果出现’?’表示可以匹配一到三个除’\0’以外的任意字符。<br>如果sub还有找不到匹配的字符，则说明不能完整匹配。</p></li><li><p>如果能完整匹配，返回匹配到的字符个数，如果有多种匹配方式，返回匹配字符数最少的那个，如果不能完整匹配，返回-1</p></li></ul><p>输入</p><blockquote><p>abcdefg<br> a?c</p></blockquote><p>输出</p><blockquote><p>3</p></blockquote><p>本题的坑在于，子串必须从头匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readline=<span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">const</span> r1=readline.createInterface(&#123;</span><br><span class="line">    input:process.stdin,</span><br><span class="line">    output:process.stdout</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time=<span class="number">0</span>;</span><br><span class="line">r1.on(<span class="string">'line'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">line</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//console.log(time)</span></span><br><span class="line">    <span class="keyword">if</span>(time==<span class="number">0</span>)&#123;</span><br><span class="line">        str1+=line;</span><br><span class="line">        time++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str2+=line;</span><br><span class="line">        <span class="keyword">var</span> c=str2.split(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;c.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="string">'?'</span>)&#123;</span><br><span class="line">            c[i]=<span class="string">'(.)&#123;1,3&#125;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str2=c.join(<span class="string">''</span>);</span><br><span class="line">        <span class="comment">//正则表示不区分大小写(i)的从头(^)匹配</span></span><br><span class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^"</span>+str2+<span class="string">""</span>,<span class="string">"i"</span>)</span><br><span class="line">        <span class="keyword">var</span> d =[];</span><br><span class="line">        <span class="comment">//d中存储匹配的结果，exec匹配结果为满足条件的所有元素的数组集合</span></span><br><span class="line">        d = reg.exec(str1);</span><br><span class="line">        <span class="comment">//test可以返回该父串中是否包含子串</span></span><br><span class="line">        <span class="keyword">if</span>(reg.test(str1))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(d[<span class="number">0</span>].length)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">-1</span>)</span><br><span class="line">            <span class="comment">//console.log(111)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的下一个节点</title>
      <link href="/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(57)/"/>
      <url>/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(57)/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p></blockquote><ul><li>该节点有右子树，则其下一个节点为其右子树的最左子节点；</li><li>该节点没有右子树<ul><li>该节点为其父节点的左子节点，则其下一节点为其父节点</li><li>该节点为其父节点的右子节点，则其下一节点为其父节点的左子节点</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetNext</span>(<span class="params">pNode</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pNode==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pNode.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        pNode=pNode.right;</span><br><span class="line">        <span class="keyword">while</span>(pNode.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pNode=pNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pNode.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pNode===pNode.next.left)&#123;</span><br><span class="line">            <span class="keyword">return</span> pNode.next</span><br><span class="line">        &#125;</span><br><span class="line">        pNode=pNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为S的两个数字</title>
      <link href="/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(42)/"/>
      <url>/2019/09/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(42)/</url>
      
        <content type="html"><![CDATA[<h1 id="和为S的两个数字"><a href="#和为S的两个数字" class="headerlink" title="和为S的两个数字"></a>和为S的两个数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。对应每个测试案例，输出两个数，小的先输出。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindNumbersWithSum</span>(<span class="params">array, sum</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> half=sum&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> res=[]</span><br><span class="line">    <span class="keyword">while</span>(half--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(array.indexOf(sum-array[i])!=<span class="number">-1</span>&amp;&amp;array.indexOf(sum-array[i])!=i)&#123;</span><br><span class="line">            <span class="keyword">var</span> t=array.indexOf(sum-array[i])</span><br><span class="line">            <span class="keyword">const</span> temp=[];</span><br><span class="line">            temp.push(array[i]);</span><br><span class="line">            temp.push(array[t]);</span><br><span class="line">            res.push(temp)</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res.length==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> minproduct=res[<span class="number">0</span>][<span class="number">0</span>]*res[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> minindex=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;res.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[j][<span class="number">0</span>]*res[j][<span class="number">1</span>]&lt;minproduct)&#123;</span><br><span class="line">            minproduct=res[j][<span class="number">0</span>]*res[j][<span class="number">1</span>];</span><br><span class="line">            minindex=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> ans=[]</span><br><span class="line">    </span><br><span class="line">    ans.push(res[minindex][<span class="number">0</span>]);</span><br><span class="line">    ans.push(res[minindex][<span class="number">1</span>]);</span><br><span class="line">    ans.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b&#125;);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现Linux内存管理伙伴算法</title>
      <link href="/2019/09/13/JavaScript%E5%AE%9E%E7%8E%B0linux%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84buddy%E7%AE%97%E6%B3%95/"/>
      <url>/2019/09/13/JavaScript%E5%AE%9E%E7%8E%B0linux%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84buddy%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统课程设计"><a href="#操作系统课程设计" class="headerlink" title="操作系统课程设计"></a>操作系统课程设计</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><blockquote><p>Linux中内存分配的伙伴堆算法模拟。<br>（1）模拟内存实始情况。<br>（2）实现Buddy heap算法。<br>（3）通过键盘输入随机产生的申请和释放操作。<br>（4）每次申请或释放都显示实时的内存分配的对比图。</p></blockquote><hr><p>实现结果：<br><img src="https://img-blog.csdnimg.cn/20190906151125797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190906151142763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190906151157847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190906151210528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190906151224582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>伙伴算法：</p><p>Linux把空闲的页面按照页块大小分组进行管理。用数组管理各个空闲页块组。当进程提出存储请求时。系统按照Buddy算法。根据请求的 页面数在free_area口对应的空闲页块组中搜索。linux并不是按 照要求的页块的数目去进行分配．而是将大于、等于这个数目的 最小2n个页块分配出去。比如，要求3个页块。就分配2-2=4块；要求16个页块，就分配24=16块．如此等等。因此，系统总是按 照进程所需连续存储块的申请数量。到空闲区队列free 中 能够满足要求的最小空闲区队列里查找。当队列不空时，就把第一个空闲区分配出去。如果该队列为空．那么就继续查找下面的队列(其空闲区的尺寸为上一个队列的2倍)。当它里面有空闲区时，就把该空闲区一分为二：一个分配出去给进程使用；余下的一半．排到它上面的空闲区队列中去。</p><p>在内存页面释放时。系统将做为空闲页面看待。然后检查是否存在与这些页面相邻的其它空闲页块，若存在，则合为一 个连续的空闲区按Buddy算法重新分组。</p><hr><p>利用JavaScript的对象数据类型和数组来存储相应的内容。<br>// 空闲块<br>let free_area = [<br>    {<br>        index: 0,<br>        size: 1024<br>    }<br>]</p><p>// 当前内存使用状况<br>let ram = [<br>    {<br>        state: false,<br>        size: 1024<br>    }<br>]<br>// 剩余空间总和<br>let free_ram = 1024;<br>    其中free_area表示空闲块数组，数组中的每一个对象表示空闲块信息，index对应当前内存ram数组中空闲块的分块的下标，size表示该空闲块大小。<br>    其中ram表示内存使用状态数组，数组中的每一个对象表示分块，state表示该块是否被使用，state为true表示已使用，反之为未使用。<br>    其中free_ram表示当前未使用内存的大小。<br>    后端到前端的渲染均依靠维护这三个变量。</p><hr><p>主要算法代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> free_area = [</span><br><span class="line">    &#123;</span><br><span class="line">        index: <span class="number">0</span>,</span><br><span class="line">        size: <span class="number">1024</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前内存使用状况</span></span><br><span class="line"><span class="keyword">let</span> ram = [</span><br><span class="line">    &#123;</span><br><span class="line">        state: <span class="literal">false</span>,</span><br><span class="line">        size: <span class="number">1024</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 剩余空间总和</span></span><br><span class="line"><span class="keyword">let</span> free_ram = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速幂</span></span><br><span class="line"><span class="keyword">var</span> pow = <span class="function"><span class="keyword">function</span> (<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans *= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(pow(2, 10))</span></span><br><span class="line"><span class="comment">// 找到申请内存大小的二次幂 </span></span><br><span class="line"><span class="keyword">var</span> findlistnum = <span class="function"><span class="keyword">function</span> (<span class="params">size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; pow(<span class="number">2</span>, i) &amp;&amp; size &lt; pow(<span class="number">2</span>, i + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == pow(<span class="number">2</span>, i)) &#123;</span><br><span class="line">            <span class="comment">// console.log(i)</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除指定下标的数组元素并返回新数组</span></span><br><span class="line"><span class="keyword">var</span> deleteArrElement = <span class="function"><span class="keyword">function</span> (<span class="params">index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newarr = &#123;</span><br><span class="line">        deleteele: arr[index],</span><br><span class="line">        arr: arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    arr.length--;</span><br><span class="line">    newarr.arr = arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newarr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找数组里面某对象的值是否是要找的值</span></span><br><span class="line"><span class="keyword">var</span> indexOfArrObj = <span class="function"><span class="keyword">function</span> (<span class="params">value, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i].size === value) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分配内存 </span></span><br><span class="line"><span class="comment">// 参数为二次幂i，返回值为新的内存状态，空闲块状态，空闲内存大小；</span></span><br><span class="line"><span class="keyword">var</span> allocation = <span class="function"><span class="keyword">function</span> (<span class="params">powi</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if(powi)</span></span><br><span class="line">    <span class="built_in">console</span>.log(powi)</span><br><span class="line">    <span class="keyword">if</span> (powi &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        powi = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nowstate = &#123;</span><br><span class="line">        ram: [],</span><br><span class="line">        free_area: [],</span><br><span class="line">        free_ram: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> blocksize = pow(<span class="number">2</span>, powi)</span><br><span class="line">    <span class="comment">// console.log(free_area)</span></span><br><span class="line">    <span class="keyword">if</span> (free_area.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 改成返回错误代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (free_area[<span class="number">0</span>].size == <span class="number">1024</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> ramsize = <span class="number">1024</span>;</span><br><span class="line">        ram.pop()</span><br><span class="line">        free_area.pop()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">10</span> - powi; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ramsize = ramsize / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;</span><br><span class="line">                index: i,</span><br><span class="line">                size: ramsize</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(ramsize)</span></span><br><span class="line">            free_area.unshift(obj);</span><br><span class="line">            <span class="keyword">let</span> tempusedobj = &#123;</span><br><span class="line">                state: <span class="literal">false</span>,</span><br><span class="line">                size: ramsize</span><br><span class="line">            &#125;</span><br><span class="line">            ram.unshift(tempusedobj)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> usedpbj = &#123;</span><br><span class="line">            state: <span class="literal">true</span>,</span><br><span class="line">            size: ramsize</span><br><span class="line">        &#125;</span><br><span class="line">        ram.unshift(usedpbj)</span><br><span class="line">        free_ram -= ramsize;</span><br><span class="line"></span><br><span class="line">        nowstate.ram = ram;</span><br><span class="line">        nowstate.free_area = free_area;</span><br><span class="line">        nowstate.free_ram = free_ram;</span><br><span class="line">        <span class="comment">// console.log('allocation ans 1' + JSON.stringify(nowstate))</span></span><br><span class="line">        <span class="keyword">return</span> nowstate;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (indexOfArrObj(blocksize, free_area) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> i = indexOfArrObj(blocksize, free_area);</span><br><span class="line">            <span class="comment">// console.log(i)</span></span><br><span class="line">            <span class="comment">// free_area.index不变</span></span><br><span class="line">            <span class="keyword">let</span> newfreeare = deleteArrElement(i, free_area);</span><br><span class="line">            free_area = newfreeare.arr;</span><br><span class="line">            <span class="comment">// console.log(free_area)</span></span><br><span class="line">            <span class="keyword">let</span> ramindex = newfreeare.deleteele.index</span><br><span class="line">            ram[ramindex].state = <span class="literal">true</span>;</span><br><span class="line">            free_ram -= newfreeare.deleteele.size;</span><br><span class="line"></span><br><span class="line">            nowstate.ram = ram;</span><br><span class="line">            nowstate.free_area = free_area;</span><br><span class="line">            nowstate.free_ram = free_ram;</span><br><span class="line">            <span class="comment">// console.log('allocation ans 2' + JSON.stringify(nowstate))</span></span><br><span class="line">            <span class="keyword">return</span> nowstate;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> findupsize = blocksize;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; pow(<span class="number">2</span>, i) * blocksize &lt;= free_area[free_area.length - <span class="number">1</span>].size; i++) &#123;</span><br><span class="line">                findupsize *= <span class="number">2</span>;</span><br><span class="line">                <span class="comment">// console.log(findupsize)</span></span><br><span class="line">                <span class="keyword">if</span> (indexOfArrObj(findupsize, free_area) != <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> nowindex = indexOfArrObj(findupsize, free_area);</span><br><span class="line">                    <span class="built_in">console</span>.log(nowindex)<span class="comment">//0</span></span><br><span class="line">                    <span class="keyword">let</span> ramindex = free_area[nowindex].index;<span class="comment">//4</span></span><br><span class="line">                    <span class="comment">//5</span></span><br><span class="line">                    <span class="comment">// let sliceindex=ram.length-1-ramindex;//0</span></span><br><span class="line">                    <span class="comment">// ram.pop();</span></span><br><span class="line">                    ram.splice(ramindex, <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">let</span> times = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(free_area[nowindex])</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> k = nowindex; free_area[nowindex].size &gt; blocksize; k++) &#123;</span><br><span class="line">                        times++;</span><br><span class="line">                        free_area[nowindex].size /= <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">var</span> obj = &#123; ...free_area[nowindex] &#125;</span><br><span class="line">                        <span class="keyword">let</span> usedobj = &#123;</span><br><span class="line">                            state: <span class="literal">false</span>,</span><br><span class="line">                            size: free_area[nowindex].size</span><br><span class="line">                        &#125;</span><br><span class="line">                        free_area.unshift(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="built_in">console</span>.log(usedobj)</span><br><span class="line">                        ram.splice(ramindex, <span class="number">0</span>, usedobj)</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    free_area.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">let</span> tempobj = &#123;</span><br><span class="line">                        state: <span class="literal">true</span>,</span><br><span class="line">                        size: free_area[nowindex].size</span><br><span class="line">                    &#125;</span><br><span class="line">                    ram.splice(ramindex, <span class="number">0</span>, tempobj)</span><br><span class="line">                    <span class="comment">// console.log(ramindex)</span></span><br><span class="line">                    <span class="comment">// ram[ramindex].state = true;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">console</span>.log(times)</span><br><span class="line">                    <span class="keyword">if</span> (times &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="comment">// console.log(222)</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">let</span> k = nowindex; k &lt; free_area.length; k++) &#123;</span><br><span class="line">                            free_area[k].index++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (times &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="comment">// console.log(111)</span></span><br><span class="line">                        <span class="keyword">let</span> freenowindex = free_area[nowindex].index;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">let</span> k = nowindex; k &lt; free_area.length; k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (free_area[k].index == freenowindex) &#123;</span><br><span class="line">                                free_area[k].index = freenowindex + (k - nowindex) + <span class="number">1</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                free_area[k].index += times;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">console</span>.log(free_area)</span><br><span class="line"></span><br><span class="line">                    free_ram -= free_area[nowindex].size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    nowstate.ram = ram;</span><br><span class="line">                    nowstate.free_area = free_area;</span><br><span class="line">                    nowstate.free_ram = free_ram;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> nowstate;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找寻对应的空闲块,如果找到并分配成功返回true;分配失败返回false;</span></span><br><span class="line"><span class="comment">// 参数：申请内存大小</span></span><br><span class="line"><span class="keyword">var</span> findFreeBlock = <span class="function"><span class="keyword">function</span> (<span class="params">size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> blockpow = findlistnum(size);</span><br><span class="line">    <span class="built_in">console</span>.log(blockpow)</span><br><span class="line">    <span class="keyword">if</span> (blockpow === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newstate = $.parseJSON(<span class="built_in">JSON</span>.stringify(allocation(blockpow)));</span><br><span class="line">    <span class="comment">// console.log(newstate)</span></span><br><span class="line">    <span class="built_in">console</span>.log(newstate)</span><br><span class="line">    <span class="keyword">if</span> (newstate == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log('findFreeBlock ans 1')</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(newstate.ram)</span></span><br><span class="line">        ram = newstate.ram;</span><br><span class="line">        free_area = newstate.free_area;</span><br><span class="line">        free_ram = newstate.free_ram;</span><br><span class="line">        <span class="comment">// console.log('findFreeBlock ans 2')</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染内存界面；</span></span><br><span class="line"><span class="keyword">var</span> renderAllocation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (free_ram == <span class="number">1024</span>) &#123;</span><br><span class="line">        ram = [&#123;</span><br><span class="line">            size: <span class="number">1024</span>,</span><br><span class="line">            state: <span class="literal">false</span></span><br><span class="line">        &#125;]</span><br><span class="line">        free_area = [&#123;</span><br><span class="line">            index: <span class="number">0</span>,</span><br><span class="line">            size: <span class="number">1024</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">1024</span></span><br><span class="line">    <span class="comment">// console.log(bcg.innerHTML)</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ram.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ram[i].state == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> width = ram[i].size / sum * <span class="number">100</span> + <span class="string">'%'</span>;</span><br><span class="line">            <span class="keyword">var</span> useddiv = <span class="string">`&lt;div class="used block `</span> + <span class="string">`kb`</span> + ram[i].size + <span class="string">`" style="width:`</span> + width + <span class="string">` "&gt;`</span> + ram[i].size + <span class="string">`KB&lt;/div&gt;`</span></span><br><span class="line">            html += useddiv</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> freewidth = ram[i].size / sum * <span class="number">100</span> + <span class="string">'%'</span>;</span><br><span class="line">            <span class="keyword">var</span> freediv = <span class="string">`&lt;div class="free block"  style="width: `</span> + freewidth + <span class="string">`"&gt;`</span> + ram[i].size + <span class="string">`KB`</span> + <span class="string">`&lt;/div&gt;`</span>;</span><br><span class="line">            html += freediv;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bcg.innerHTML = html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// $('.bcg').append(useddiv);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log('renderAllocation ans 1')</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 格式化时间</span></span><br><span class="line"><span class="keyword">var</span> formatDateTime = <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var y = date.getFullYear();  </span></span><br><span class="line">    <span class="comment">// var m = date.getMonth() + 1;  </span></span><br><span class="line">    <span class="comment">// m = m &lt; 10 ? ('0' + m) : m;  </span></span><br><span class="line">    <span class="comment">// var d = date.getDate();  </span></span><br><span class="line">    <span class="comment">// d = d &lt; 10 ? ('0' + d) : d;  </span></span><br><span class="line">    <span class="keyword">var</span> h = date.getHours();</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + h) : h;</span><br><span class="line">    <span class="keyword">var</span> minute = date.getMinutes();</span><br><span class="line">    minute = minute &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + minute) : minute;</span><br><span class="line">    <span class="keyword">var</span> second = date.getSeconds();</span><br><span class="line">    second = second &lt; <span class="number">10</span> ? (<span class="string">'0'</span> + second) : second;</span><br><span class="line">    <span class="keyword">return</span> h + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//申请内存 参数：申请内存大小</span></span><br><span class="line"><span class="keyword">var</span> applicationram = <span class="function"><span class="keyword">function</span> (<span class="params">size</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isAllocationOk = findFreeBlock(size);</span><br><span class="line">    <span class="comment">// console.log(isAllocationOk)</span></span><br><span class="line">    <span class="keyword">if</span> (!isAllocationOk) &#123;</span><br><span class="line">        <span class="comment">// console.log('applicationram ans 1')</span></span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">'分配失败'</span>);</span><br><span class="line">        <span class="keyword">let</span> messagewrap = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">let</span> messagediv = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">        messagewrap.classList.add(<span class="string">'message-wrap'</span>);</span><br><span class="line">        messagediv.classList.add(<span class="string">'message-text'</span>);</span><br><span class="line">        messagediv.classList.add(<span class="string">'fail'</span>);</span><br><span class="line">        messagediv.classList.add(<span class="string">'applicationtext'</span>)</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> datestr = formatDateTime(date);</span><br><span class="line">        messagediv.innerHTML = datestr + <span class="string">`分配内存`</span> + size + <span class="string">`KB 失败!`</span>;</span><br><span class="line">        messagewrap.appendChild(messagediv);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> leftwrap = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'left-wrap'</span>)[<span class="number">0</span>];</span><br><span class="line">        leftwrap.appendChild(messagewrap);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">            messagewrap.classList.add(<span class="string">'active'</span>)</span><br><span class="line">        &#125;, <span class="number">1</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            messagewrap.classList.add(<span class="string">'disappear'</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">         setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             messagewrap.style.display=<span class="string">'none'</span></span><br><span class="line">         &#125;,<span class="number">10000</span>);</span><br><span class="line">        renderAllocation()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('applicationram ans 2')</span></span><br><span class="line">        <span class="keyword">let</span> messagewrap = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">let</span> messagediv = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">        messagewrap.classList.add(<span class="string">'message-wrap'</span>);</span><br><span class="line">        messagediv.classList.add(<span class="string">'message-text'</span>);</span><br><span class="line">        messagediv.classList.add(<span class="string">'applicationtext'</span>)</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> datestr = formatDateTime(date);</span><br><span class="line">        messagediv.innerHTML = datestr + <span class="string">` 成功分配内存`</span> + size + <span class="string">`KB !`</span>;</span><br><span class="line">        messagewrap.appendChild(messagediv);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> leftwrap = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'left-wrap'</span>)[<span class="number">0</span>];</span><br><span class="line">        leftwrap.appendChild(messagewrap);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">            messagewrap.classList.add(<span class="string">'active'</span>)</span><br><span class="line">        &#125;, <span class="number">1</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            messagewrap.classList.add(<span class="string">'disappear'</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">         setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             messagewrap.style.display=<span class="string">'none'</span></span><br><span class="line">         &#125;,<span class="number">10000</span>);</span><br><span class="line">        renderAllocation()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确定分配内存</span></span><br><span class="line"><span class="keyword">var</span> buddyheap = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> applicationsize = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'input'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="comment">// 申请内存</span></span><br><span class="line">        applicationram(applicationsize)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// applicationram(70)</span></span><br><span class="line">applicationbtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    state = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// console.log(state)</span></span><br><span class="line">    buddyheap(state);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给已申请成功的内存块加监听事件</span></span><br><span class="line"><span class="keyword">var</span> usedramaddevent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; blockram.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = i;</span><br><span class="line">            blockram[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(index)</span><br><span class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">                <span class="keyword">if</span> (ram[index].state == <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (confirm(<span class="string">'release this block?'</span>)) &#123;</span><br><span class="line">                        resolve(index)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(<span class="literal">false</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放内存 参数：释放内存大小，释放内存块在内存中的下标</span></span><br><span class="line"><span class="keyword">var</span> releasram = <span class="function"><span class="keyword">function</span> (<span class="params">size, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(ram)</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        index: index,</span><br><span class="line">        size: size</span><br><span class="line">    &#125;</span><br><span class="line">    free_area.unshift(obj)</span><br><span class="line">    free_area.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.index - b.index</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(free_area)</span><br><span class="line">    <span class="keyword">if</span> (free_area.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> ramindex = free_area[k].index;</span><br><span class="line">        ram[ramindex].state=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(ramindex)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(size)</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当从头到尾没有伙伴内存的时候，flag=false</span></span><br><span class="line">            <span class="keyword">if</span> (k &gt;= free_area.length - <span class="number">1</span>) &#123;</span><br><span class="line">                k = (k % free_area.length) - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((free_area[k].index - free_area[k + <span class="number">1</span>].index == <span class="number">-1</span>) &amp;&amp; (free_area[k].size == free_area[k + <span class="number">1</span>].size)) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="number">444</span>)</span><br><span class="line">                <span class="keyword">let</span> ramindex = free_area[k].index;</span><br><span class="line">                ram[ramindex].size *= <span class="number">2</span>;</span><br><span class="line">                ram[ramindex].state = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                ram.splice(ramindex + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                free_area[k].size *= <span class="number">2</span>;</span><br><span class="line">                free_area.splice(k + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = k + <span class="number">1</span>; i &lt; free_area.length; i++) &#123;</span><br><span class="line">                    free_area[i].index--;</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((k == free_area.length - <span class="number">1</span> &amp;&amp; flag == <span class="literal">true</span>) || free_area.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="number">999</span>)</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(free_area)</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; free_area.length; i++) &#123;</span><br><span class="line">        s += free_area[i].size;</span><br><span class="line">    &#125;</span><br><span class="line">    free_ram = s;</span><br><span class="line">    <span class="comment">// console.log(ram)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非递归实现二叉树遍历</title>
      <link href="/2019/09/11/%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%20JavaScript%E7%89%88/"/>
      <url>/2019/09/11/%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%20JavaScript%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><del>关于二叉树充满血泪的一天</del> </p><blockquote><p>用非递归的方式实现二叉树，真的死了好多脑细胞，可能是我太菜了吧</p></blockquote><p>题目描述：<br>用非递归方式编码对一个二叉树的前、中、后、层次遍历。</p><p>输入描述：<br>第一行一个正整数n(1&lt;=n&lt;=100)，表示二叉树有n个结点。<br>接下来n行，第i行两个整数li,ri (0&lt;=li,ri&lt;=n) ，分别表示第i个结点的左儿子和右儿子，为0代表空。<br>保证根为1，保证输入为合法二叉树。</p><p>输出描述：<br>输出四行<br>第一行为二叉树的前序遍历；<br>第二行为中序遍历；<br>第三行为后序遍历；<br>第四行为层次遍历。<br>每一行输出n个数，代表该方式遍历的结点的顺序，相邻两个数之间用一个空格相隔。</p><p>输入例子：</p><blockquote><p>5<br>3 2<br>0 5<br>0 4<br>0 0<br>0 0</p></blockquote><p>输出例子：</p><blockquote><p>1 3 4 2 5<br>3 4 1 2 5<br>4 3 5 2 1<br>1 3 2 4 5</p></blockquote><hr><p>输入给的例子需要进行一定的处理。<br>处理完成之后得到的是一棵树。</p><p>对这棵树进行遍历。</p><p>以下是记录了这一天和二叉树遍历的爱恨情仇。</p><hr><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>前序遍历就是先根遍历，先根节点，后左子树，然后右子树。<br>非递归的话，利用栈的结构。<br>1.（先根节点）从根开始先入栈；<br>2.（后左子树）一直向左节点遍历并入栈左节点；<br>3.（再右子树）如果当前节点没有左节点，则出栈，并将当前指针指向栈顶节点，然后指向右节点，开始遍历右子树。<br>PS：只要当前指针指向的节点存在，则表示遍历到此处，即将该节点放入res中，表示遍历顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pretraver=<span class="function"><span class="keyword">function</span>(<span class="params">pRoot</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res=[];</span><br><span class="line"><span class="keyword">var</span> pCur=pRoot;</span><br><span class="line"><span class="keyword">var</span> stack=[];</span><br><span class="line">stack.push(pRoot);</span><br><span class="line"><span class="keyword">while</span>(stack.length!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(pCur)&#123;</span><br><span class="line">res.push(pCur.val);</span><br><span class="line">stack.push(pCur);</span><br><span class="line">pCur=pCur.left;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">pCur=stack.pop();</span><br><span class="line">pCur=pCur.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>中序遍历就是中根遍历，即先左子树，后根，最后右子树。<br>非递归，依然使用栈。<br>1.一直向左遍历，入栈所有经过节点。<br>2.当前指针为空，则出栈，指针指向出栈节点，并将该节点放入res中，并将该节点右孩子入栈。指针指向右孩子。<br>3.如果当前指针为空，且栈为空，则表示遍历完了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intraver=<span class="function"><span class="keyword">function</span>(<span class="params">pRoot</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pCur=pRoot;</span><br><span class="line"><span class="keyword">var</span> res=[];</span><br><span class="line"><span class="keyword">var</span> stack=[];</span><br><span class="line">stack.push(pCur);</span><br><span class="line"><span class="keyword">var</span> done=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!done)&#123;</span><br><span class="line"><span class="keyword">if</span>(pCur)&#123;</span><br><span class="line">stack.push(pCur);</span><br><span class="line">pCur=pCur.left;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stack.length!=<span class="number">0</span>)&#123;</span><br><span class="line">pCur=stack.pop();</span><br><span class="line">res.push(pCur.val);</span><br><span class="line">pCur=pCur.right;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">done=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>后序遍历就是后根遍历，先左子树，后右子树，再根节点。<br>非递归实现，需要用到栈。<br>但是后序有一种简单的思路，就是利用与前序遍历的关系。<br>后序遍历就是先右后左的先（前）序遍历。<br>1.先根节点入栈。<br>2.然后左节点入栈。<br>3.最后右节点入栈。<br>PS：每次指向栈顶元素。并出栈。栈顶即为每一轮的右节点。所以即为先右后左。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lasttraver=<span class="function"><span class="keyword">function</span>(<span class="params">pRoot</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pCur=pRoot;</span><br><span class="line"><span class="keyword">var</span> stack=[];</span><br><span class="line"><span class="keyword">var</span> res=[];</span><br><span class="line">stack.push(pCur);</span><br><span class="line"><span class="keyword">while</span>(stack.length!=<span class="number">0</span>)&#123;</span><br><span class="line">pCur=stack.pop();</span><br><span class="line">res.push(pCur.val);</span><br><span class="line"><span class="keyword">if</span>(pCur)&#123;</span><br><span class="line">pCur=pCur.left;</span><br><span class="line">stack.push(pCur);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">pCur=pCur.right;</span><br><span class="line">stack.push(pCur)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="按层遍历"><a href="#按层遍历" class="headerlink" title="按层遍历"></a>按层遍历</h4><p>按层遍历特殊一点，需要先进先出，因为是按照从上到下，从左到右的顺序进入存储结构，但是又要从左到右从上到下进行遍历左右节点，所以需要队列，先进先出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leveltraver=<span class="function"><span class="keyword">function</span>(<span class="params">pRoot</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pCur=pRoot;</span><br><span class="line"><span class="keyword">var</span> queue=[];</span><br><span class="line">queue.push(pCur);</span><br><span class="line"><span class="keyword">var</span> res=[];</span><br><span class="line"><span class="keyword">while</span>(queue.length!=<span class="number">0</span>)&#123;</span><br><span class="line">res.push(queue.shift().val);</span><br><span class="line"><span class="keyword">if</span>(pCur.left)&#123;</span><br><span class="line">queue.push(pCur.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pCur.right)&#123;</span><br><span class="line">queue.push(pCur.right);</span><br><span class="line">&#125;</span><br><span class="line">pCur=queue[queue.length<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>ps：如果有人有需要数据处理部分的代码的，请留言噢。有需要的话我再贴。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2019/09/10/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(7)/"/>
      <url>/2019/09/10/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(7)/</url>
      
        <content type="html"><![CDATA[<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> curr=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> last=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        curr+=last;</span><br><span class="line">        last=curr-last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据流中的中位数</title>
      <link href="/2019/09/10/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(63)/"/>
      <url>/2019/09/10/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(63)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。</p></blockquote><ul><li>一边排序，一边返回中位数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insert</span>(<span class="params">num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    arr.push(num)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=arr.length<span class="number">-2</span>;arr[i]&gt;num;i--)</span><br><span class="line">        [arr[i],arr[i+<span class="number">1</span>]]=[arr[i+<span class="number">1</span>],arr[i]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetMedian</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(arr.length&amp;<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[(arr.length<span class="number">-1</span>)/<span class="number">2</span>]&#125;</span><br><span class="line">    <span class="keyword">return</span> (arr[(arr.length)/<span class="number">2</span><span class="number">-1</span>]+arr[(arr.length)/<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口的最大值</title>
      <link href="/2019/09/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(64)/"/>
      <url>/2019/09/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(64)/</url>
      
        <content type="html"><![CDATA[<h1 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p></blockquote><ul><li>每次找到窗口中的最大值放进res中</li><li>一次移动一格</li><li>i对应的是窗口尾部对应的数组下标</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxInWindows</span>(<span class="params">num, size</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> res=[]</span><br><span class="line">    <span class="keyword">const</span> queue=[]</span><br><span class="line">    <span class="keyword">let</span> max=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(num.length==<span class="number">0</span>||size&lt;<span class="number">1</span>||size&gt;num.length)<span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">        queue.push(num[i])</span><br><span class="line">        <span class="keyword">if</span>(max&lt;=num[i]) max=num[i]</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(max)</span><br><span class="line">    <span class="keyword">while</span>(i&lt;num.length)&#123;</span><br><span class="line">        <span class="keyword">let</span> m=queue.shift()</span><br><span class="line">        <span class="keyword">if</span>(m==max)&#123;</span><br><span class="line">            max=getMax(queue)</span><br><span class="line">        &#125;</span><br><span class="line">        queue.push(num[i])</span><br><span class="line">        <span class="keyword">if</span>(num[i]&gt;=max) max=num[i]</span><br><span class="line">        res.push(max)</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">q</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max=<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;q.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[j]&gt;max)&#123;</span><br><span class="line">            max=q[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺时针打印矩阵</title>
      <link href="/2019/09/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(19)/"/>
      <url>/2019/09/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(19)/</url>
      
        <content type="html"><![CDATA[<h3 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p></blockquote><p>tips：此处注意concat不改变原数组，结果需要保存起来</p><p>本题用的使模拟魔方旋转矩阵</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//  [1,2,3,4],</span></span><br><span class="line"><span class="comment">//  [5,6,7,8],</span></span><br><span class="line"><span class="comment">//  [9,10,11,12],</span></span><br><span class="line"><span class="comment">//  [13,14,15,16]</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMatrix</span>(<span class="params">matrix</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(!matrix)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> res=[];</span><br><span class="line">    res=res.concat(matrix.shift());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(matrix.length)&#123;</span><br><span class="line">        matrix=nizhi(matrix);</span><br><span class="line">        res=res.concat(matrix.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态划分的典型问题</title>
      <link href="/2019/09/03/%E5%8A%A8%E6%80%81%E5%88%92%E5%88%86%20JavaScript%E7%89%88%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/03/%E5%8A%A8%E6%80%81%E5%88%92%E5%88%86%20JavaScript%E7%89%88%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="动态划分的典型问题"><a href="#动态划分的典型问题" class="headerlink" title="动态划分的典型问题"></a>动态划分的典型问题</h3><ol><li><p>一般背包问题<br> 假设有m个物品，每个物品质量为 W[ i ]，每个物品的价值为 V[ i ]。<br> 背包容量为N。<br> 求能够带走的最大价值为多少。<br> 每个物品，带走或者不带走，即其标记为1或0；<br> 假设每次装该物品数量为num[ i ]<br> 限制条件是，Σ( num[ i ] * W[ i ] ) &lt;=N ，即拿走的物品质量不能超过背包容量。<br>  dp[j] 表示当背包内容量为j时，其装的最大价值的东西质量为dp[j]。</p><hr><p>  举个例子：<br>  假设有一个背包容量为10kg，有三个物品，一个为1kg，一个为5kg，一个为7kg，三个价值分别为10,20,15。<br>  那么容量为1kg，dp[1]=max(10)；2kg，dp[2]=max(10)；3kg…..；5kg，dp[5]=max(v[1]+dp[5-w[0]],dp[4])=max(20,10)=20；以此类推，所以随着j的增长，dp[j]并不是线性增长的，限制条件即为最少需要j&gt;=w[i]，至少取一件物品。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bagpro=<span class="function"><span class="keyword">function</span>(<span class="params">w,v,n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> dp=<span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>);</span><br><span class="line">dp.fill(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;w.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=n;j&gt;=w[i];j--)&#123;</span><br><span class="line">dp[j]=<span class="built_in">Math</span>.max(v[j]+dp[j-w[i]],dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完全背包问题<br> 假设每个物品质量为 W[ i ]，每个物品价值为 V[ i ]，物品数量无限。<br> 背包容量为N，求能够带走的最大价值为多少？<br> 限制条件是Σ (num[i]*w[i])&lt;=N，此时num[i]取值是非负数即可，因为物品数量不限。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> completebagpro=<span class="function"><span class="keyword">function</span>(<span class="params">w,v,n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> dp=<span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>);</span><br><span class="line">dp.fill(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;w.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=w[i];j&lt;n;j++)&#123;</span><br><span class="line">dp[j]=<span class="built_in">Math</span>.max(v[i]+dp[j-w[i]],dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p>解决动态划分问题最重要的是找到对应的状态转移方程。</p><p>例1：零钱问题<br>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。<br>dp[j]表示组成金额为j的最少硬币数为dp[j]<br>状态转移方程为：dp[j]=math.min(dp[j-coins[i]]+1,dp[j])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countcoins</span>(<span class="params">coins,amount</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> dp=<span class="keyword">new</span> <span class="built_in">Array</span>(amount+<span class="number">1</span>);</span><br><span class="line">dp.fill(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;coins.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=coins[i];j&lt;amount;j++)&#123;</span><br><span class="line">dp[j]=<span class="built_in">Math</span>.min(<span class="number">1</span>+dp[j-coins[i]],dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[amount]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：硬币划分<br>有1分，2分，5分，10分四种硬币，每种硬币数量无限，给定n分钱(n &lt;= 100000)，有多少中组合可以组成n分钱？<br>dp[j]表示组成j分钱有dp[j]种方法。<br>状态转移方程为：dp[j]=dp[j-coins[0]]+dp[j-coins[1]]+dp[j-coins[2]]+dp[j-coins[3]];<br>比如说要组成13分，那么去掉一个1分硬币，就是组成12分硬币的种数；去掉一个2分硬币，就是组成11分硬币的种数；以此类推，以上分解情况的和就是组成13分的组合数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coinsCombination</span>(<span class="params">coins,n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> dp=<span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;coins.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=coins[i];j&lt;n;j++)&#123;</span><br><span class="line">dp[j]+=dp[j-coins[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把数组排成最小的数</title>
      <link href="/2019/08/31/%E5%89%91%E6%8C%87offer%20JavaScript%20%E7%89%88(32)/"/>
      <url>/2019/08/31/%E5%89%91%E6%8C%87offer%20JavaScript%20%E7%89%88(32)/</url>
      
        <content type="html"><![CDATA[<h3 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a>把数组排成最小的数</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p></blockquote><ul><li>将数字拼接成一个数，需要数字越大越排在低位，越小的数字排在高位，所以需要321的1排在尽量高的位置。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintMinNumber</span>(<span class="params">numbers</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">s1,s2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> n1=<span class="string">`<span class="subst">$&#123;s1&#125;</span><span class="subst">$&#123;s2&#125;</span>`</span></span><br><span class="line">        <span class="keyword">const</span> n2=<span class="string">`<span class="subst">$&#123;s2&#125;</span><span class="subst">$&#123;s1&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> n1&gt;n2</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> min=<span class="string">''</span></span><br><span class="line">    numbers.forEach(<span class="function">(<span class="params">i</span>)=&gt;</span>min+=i);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人的运动范围</title>
      <link href="/2019/08/30/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(66)/"/>
      <url>/2019/08/30/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(66)/</url>
      
        <content type="html"><![CDATA[<h1 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p></blockquote><ul><li>设置一个访问数组，已经访问过的位置标记为true</li><li>每次都需要检查是否该方格的下标符合要求，如果符合要求，则标记该格子为true，并且向上下左右继续遍历。</li><li>递归需要注意截止的条件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movingCount</span>(<span class="params">threshold, rows, cols</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> visited=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">        visited.push([])</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">            visited[i][j]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> movingCountCore(threshold,rows,cols,<span class="number">0</span>,<span class="number">0</span>,visited)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movingCountCore</span>(<span class="params">threshold,rows,cols,i,j,visited</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i===rows||j&lt;<span class="number">0</span>||j===cols||visited[i][j])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp=<span class="string">`<span class="subst">$&#123;i&#125;</span><span class="subst">$&#123;j&#125;</span>`</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;tmp.length;k++)&#123;</span><br><span class="line">        sum+=tmp.charAt(k)/<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;threshold)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>+ movingCountCore(threshold,rows,cols,i+<span class="number">1</span>,j,visited)+</span><br><span class="line">             movingCountCore(threshold,rows,cols,i<span class="number">-1</span>,j,visited)+</span><br><span class="line">             movingCountCore(threshold,rows,cols,i,j+<span class="number">1</span>,visited)+</span><br><span class="line">             movingCountCore(threshold,rows,cols,i,j<span class="number">-1</span>,visited)</span><br><span class="line">           )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2019/08/29/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(15)/"/>
      <url>/2019/08/29/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(15)/</url>
      
        <content type="html"><![CDATA[<h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表，反转链表后，输出新链表的表头。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseList</span>(<span class="params">pHead</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> pNode=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> pNext=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(pHead!==<span class="literal">null</span>)&#123;</span><br><span class="line">        pNext=pHead.next;</span><br><span class="line">        pHead.next=pNode;</span><br><span class="line">        pNode=pHead;</span><br><span class="line">        pHead=pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中环的入口节点</title>
      <link href="/2019/08/29/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(55)/"/>
      <url>/2019/08/29/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(55)/</url>
      
        <content type="html"><![CDATA[<h1 id="链表中环的入口节点"><a href="#链表中环的入口节点" class="headerlink" title="链表中环的入口节点"></a>链表中环的入口节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20190813155243556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt=""></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EntryNodeOfLoop</span>(<span class="params">pHead</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> fast=pHead;</span><br><span class="line">    <span class="keyword">let</span> slow=pHead;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">        fast=fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">            <span class="keyword">let</span> p=pHead;</span><br><span class="line">            <span class="keyword">while</span>(p!=slow)&#123;</span><br><span class="line">                p=p.next;</span><br><span class="line">                slow=slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个只出现一次的字符</title>
      <link href="/2019/08/28/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(34)/"/>
      <url>/2019/08/28/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(34)/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个只出现一次的字符"><a href="#第一个只出现一次的字符" class="headerlink" title="第一个只出现一次的字符"></a>第一个只出现一次的字符</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>在一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.</p></blockquote><hr><p>反复去找，并且有一个常用定位当前比较的第一次出现的字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstNotRepeatingChar</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">   <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> strarr = str.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> curletter = strarr[<span class="number">0</span>];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strarr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">        curletter = strarr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; strarr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j !== i &amp;&amp; strarr[j] === curletter) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(curletter, i, flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="built_in">console</span>.log(i, flag)</span><br><span class="line">        <span class="keyword">if</span> (flag === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag === <span class="literal">true</span>||str===<span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丑数</title>
      <link href="/2019/08/27/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(33)/"/>
      <url>/2019/08/27/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(33)/</url>
      
        <content type="html"><![CDATA[<h1 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p></blockquote><hr><p>1<br>2=min(2<em>1,3</em>1,5<em>1)<br>3=min(2</em>2,3<em>1,5</em>1)<br>4=min(2<em>2,3</em>2,5<em>1)<br>5=min(2</em>3,3<em>2,5</em>1)<br>6=min(2<em>3,3</em>2,5<em>2)<br>8=min(2</em>4,3<em>3,5</em>2)<br>…</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUglyNumber_Solution</span>(<span class="params">index</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code her</span></span><br><span class="line">    <span class="keyword">const</span> res=[]</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">7</span>) <span class="keyword">return</span> index;<span class="comment">//1,2,3,4,5,6都是丑数</span></span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> two=<span class="number">0</span>,three=<span class="number">0</span>,five=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;index;i++)&#123;</span><br><span class="line">        res[i]=<span class="built_in">Math</span>.min(res[two]*<span class="number">2</span>,res[three]*<span class="number">3</span>,res[five]*<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span>(res[i]===res[two]*<span class="number">2</span>) two++;</span><br><span class="line">        <span class="keyword">if</span>(res[i]===res[three]*<span class="number">3</span>) three++;</span><br><span class="line">        <span class="keyword">if</span>(res[i]===res[five]*<span class="number">5</span>) five++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[index<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不用加减乘除做加法</title>
      <link href="/2019/08/26/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20%20(48)/"/>
      <url>/2019/08/26/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20%20(48)/</url>
      
        <content type="html"><![CDATA[<h1 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p></blockquote><ul><li>先做异或做非进位加，再判断通过与判断是否有进位，有进位为移位。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">num1, num2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">while</span>(num2!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> tmp=num1^num2;</span><br><span class="line">        num2=(num1&amp;num2)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        num1=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组查找</title>
      <link href="/2019/08/25/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(1)/"/>
      <url>/2019/08/25/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="二维数组查找"><a href="#二维数组查找" class="headerlink" title="二维数组查找"></a>二维数组查找</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment">//解法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; array[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i][j] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Findplus</span>(<span class="params">target,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> row=array.length;</span><br><span class="line">    <span class="keyword">const</span> col=array[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">var</span> rownum=row<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> colnum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rownum==<span class="number">0</span>&amp;&amp;colnum==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(rownum&gt;=<span class="number">0</span>&amp;&amp;colnum&lt;=col<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[rownum][colnum]&lt;target)&#123;</span><br><span class="line">                colnum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(array[rownum][colnum]&gt;target)&#123;</span><br><span class="line">                rownum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = Find(<span class="number">6</span>, array)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript语法盲点</title>
      <link href="/2019/08/23/JavaScript%20%E8%AF%AD%E6%B3%95%E7%9B%B2%E7%82%B9/"/>
      <url>/2019/08/23/JavaScript%20%E8%AF%AD%E6%B3%95%E7%9B%B2%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h5 id="2019-8-2更新"><a href="#2019-8-2更新" class="headerlink" title="2019.8.2更新"></a>2019.8.2更新</h5><ol><li><p>对象赋值</p><blockquote><p>在对象/数组中直接提取属性/值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [b]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//b=1</span></span><br><span class="line"><span class="keyword">var</span> &#123;a&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//a=1</span></span><br></pre></td></tr></table></figure></li><li><p>引用类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//f=[1,2,3,4]</span></span><br><span class="line"><span class="keyword">var</span> ff=f</span><br><span class="line">ff.push(<span class="number">5</span>)</span><br><span class="line"><span class="comment">//f=[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li><li><p>ES6 扩展运算符（…）</p></li><li><p>1  解构赋值</p><blockquote><p>用于从一个对象取值，将目标对象所有可遍历的属性，且尚未读取的属性，分配到指定对象上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//example1</span></span><br><span class="line"><span class="keyword">var</span> &#123;a,b,...c&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">cc</span>:<span class="number">3</span>,<span class="attr">dd</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">//a=1</span></span><br><span class="line"><span class="comment">//b=2</span></span><br><span class="line"><span class="comment">//c=&#123;cc:3,dd:4&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>解构赋值要求等号右边为对象（不能是undefined或null），且解构赋值必须是最后一个参数’</p></blockquote></li></ol><p>3.2 扩展运算符</p><blockquote><p>对象的扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;<span class="attr">a</span>:<span class="number">2</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;...obj1,...obj2&#125;</span><br><span class="line"><span class="comment">//obj=&#123;a:2,b:4,c:6&#125;</span></span><br><span class="line"><span class="comment">//会出现覆盖现象</span></span><br></pre></td></tr></table></figure><ol start="4"><li>深拷贝与浅拷贝/复制</li></ol><ul><li>浅拷贝：将原对象/数组的引用直接赋值给新对象，新数组/对象只是原数组/对象的一个引用；</li><li>深拷贝：创建一个新的数组/对象，将原数组/对象的元素或各项属性拷贝过来。</li></ul><ol start="5"><li>Array.of()与Array()</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="built_in">Array</span>.of(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//a=[1]</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="built_in">Array</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//b=[empty*3]</span></span><br></pre></td></tr></table></figure><hr><h5 id="2019-8-3-更新"><a href="#2019-8-3-更新" class="headerlink" title="2019.8.3 更新"></a>2019.8.3 更新</h5><ol start="6"><li>Map<br>Map相当于Object，但比Object更好用，区别在于Map可以设置的键值可以为函数。<blockquote><p>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。<br>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。<br>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。<br>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。<br>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。<br>Map 在涉及频繁增删键值对的场景下会有些性能优势。</p></blockquote></li></ol><hr><h5 id="2019-8-7-更新"><a href="#2019-8-7-更新" class="headerlink" title="2019.8.7 更新"></a>2019.8.7 更新</h5><ol><li>NaN的类型是 Number</li><li>undefined的类型是undefined</li><li>null的类型是object</li><li>命名符号不能包括：- + * / # @ ^ %</li><li>命名符号可以有：_ $ </li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字在排序数组中出现的次数</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(37)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(37)/</url>
      
        <content type="html"><![CDATA[<h1 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a>数字在排序数组中出现的次数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>统计一个数字在排序数组中出现的次数。</p></blockquote><ul><li>用二分查找找到第一次出现的地方和最后一次出现的地方，两者相减再加1即为出现的次数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetNumberOfK</span>(<span class="params">data, k</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>( getBegin(data,k) == <span class="number">-1</span> &amp;&amp; getEnd(data,k) == <span class="number">-1</span> )<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> getEnd(data,k)-getBegin(data,k)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBegin</span>(<span class="params">data,k</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right=data.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> mid=right+left&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[mid]&lt;k)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data[mid]&gt;k)&#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data[mid<span class="number">-1</span>]===k&amp;&amp;mid<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">           right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid=right+left&gt;&gt;<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEnd</span>(<span class="params">data,k</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right=data.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> mid=right+left&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[mid]&lt;k)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data[mid]&gt;k)&#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data[mid+<span class="number">1</span>]==k&amp;&amp;mid+<span class="number">1</span>&lt;=data.length)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid=right+left&gt;&gt;<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(5)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(5)/</url>
      
        <content type="html"><![CDATA[<h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190729173004148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RhbXBfWFVO,size_16,color_FFFFFF,t_70" alt="思路"><br>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inStack = []</span><br><span class="line"><span class="keyword">const</span> outStack = []</span><br><span class="line"><span class="comment">//123456</span></span><br><span class="line"><span class="comment">//入栈【123456】先出6，先入1</span></span><br><span class="line"><span class="comment">//入队【123456】先出1，后出6</span></span><br><span class="line"><span class="comment">//用栈模拟队列，那么出队列相当于用入的栈一个一个出栈进入出的栈，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    inStack.push(node)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!outStack.length)&#123;</span><br><span class="line">        <span class="keyword">while</span>(inStack.length)&#123;</span><br><span class="line">            outStack.push(inStack.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outStack.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组最小的数字</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(6)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(6)/</url>
      
        <content type="html"><![CDATA[<h3 id="旋转数组最小的数字"><a href="#旋转数组最小的数字" class="headerlink" title="旋转数组最小的数字"></a>旋转数组最小的数字</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findminnumber</span>(<span class="params">rotateArray</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(rotateArray[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rotateArray.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[i]&gt;rotateArray[i+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> rotateArray[i+<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含min函数的栈</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(20)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(20)/</url>
      
        <content type="html"><![CDATA[<h3 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack=[];</span><br><span class="line"><span class="keyword">var</span> minstack=[];</span><br><span class="line"><span class="keyword">var</span> minele=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(minele!==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node&lt;minele)&#123;</span><br><span class="line">            minele=node;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(node);</span><br><span class="line">        minstack.push(minele);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        minele=node;</span><br><span class="line">        stack.push(node);</span><br><span class="line">        minstack.push(minele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    stack.pop();</span><br><span class="line">    minstack.pop();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">top</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> stack[stack.length<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> minstack[minstack.length<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把字符串转换成整数</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(49)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(49)/</url>
      
        <content type="html"><![CDATA[<h1 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p></blockquote><ul><li>重点在于每次需要移位，移位对应十进制是10，对应二进制是1010，所以移一位，再移三位。</li><li>注意还需要判断符号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StrToInt</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> n=str.length;</span><br><span class="line">    <span class="keyword">if</span>(!n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">        flag=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i= str[<span class="number">0</span>]==<span class="string">'-'</span>||str[<span class="number">0</span>]==<span class="string">'+'</span>?<span class="number">1</span>:<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]&lt;=<span class="string">'0'</span>||str[i]&gt;=<span class="string">'9'</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        res=(res&lt;&lt;<span class="number">1</span>)+(res&lt;&lt;<span class="number">3</span>)+(str[i]-<span class="string">'0'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res*flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的镜像</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(18)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(18)/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p></blockquote><p>递归。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mirror</span>(<span class="params">root</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(root===<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line">    Mirror(root.left);</span><br><span class="line">    Mirror(root.right);</span><br><span class="line">    [root.left,root.right]=[root.right,root.left];</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称的二叉树</title>
      <link href="/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(58)/"/>
      <url>/2019/08/23/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(58)/</url>
      
        <content type="html"><![CDATA[<h1 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p></blockquote><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSymmetrical</span>(<span class="params">pRoot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pRoot==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> compare(pRoot.left,pRoot.right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left===<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> right===<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(right===<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left.val!=right.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> compare(left.left,right.right)&amp;&amp;compare(left.right,right.left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南阅读笔记</title>
      <link href="/2019/08/22/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/22/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h5><ol><li>script标签属性值<ul><li>type，定义了脚本属性，其值有<br>text/jscript：基于JScript方式，微软在IE种实现ECMAScript语言的变种。<br>text/javascript：<br>text/ecmascript<br>text/vbscript、text/vbs：微软基于VBScript的处理方式；</li><li>charset，字符集</li><li>defer，值为defer，表示不会生成任何文档，浏览器提前处理页面剩余部分，在结束时再处理script部分。提高了载入页面的速度。</li></ul></li></ol><ol start="2"><li>脚本的位置一般要么全部放在head标签种，要么放在body的最末处。</li><li>在IE8中如果用window.writeln向document中写入新内容，会导致后退按钮失效。</li><li>变量名必须以字母、$或下划线开头。变量由字母，数字，下划线和 $ 符号组成。</li><li>camelcase命名法：例：validateName，validateNameInRegister……</li><li>js有三种基本数据类型，数字，字符串，布尔。对应的是数字值，字符串值，布尔值。<br>基于对象的操作方式产生了String,Number,Boolean对象，这些对象有内部属性和操作方法。</li><li>typeof(undefined)=”undefined”<br>typeof(NaN)=”number”</li><li>空串布尔值为false，NaN和0的布尔值为false，undefined的布尔值为false。</li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流中第一个只出现一次的字符</title>
      <link href="/2019/08/22/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(54)/"/>
      <url>/2019/08/22/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(54)/</url>
      
        <content type="html"><![CDATA[<h1 id="字符流中第一个只出现一次的字符"><a href="#字符流中第一个只出现一次的字符" class="headerlink" title="字符流中第一个只出现一次的字符"></a>字符流中第一个只出现一次的字符</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p></blockquote><ul><li>用对象实现哈希表存值</li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Init module if you need</span></span><br><span class="line"><span class="keyword">let</span> map=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    map=&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Insert one char from stringstream</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insert</span>(<span class="params">ch</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(map[ch])&#123;</span><br><span class="line">        map[ch]+=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        map[ch]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return the first appearence once char in current stringstream</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstAppearingOnce</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> map)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map[i]===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数中1出现的次数</title>
      <link href="/2019/08/22/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(31)/"/>
      <url>/2019/08/22/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(31)/</url>
      
        <content type="html"><![CDATA[<h3 id="整数中1出现的次数"><a href="#整数中1出现的次数" class="headerlink" title="整数中1出现的次数"></a>整数中1出现的次数</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>求出1-13的整数中1出现的次数,并算出100-1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1Between1AndN_Solution</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">let</span> tmp=n;</span><br><span class="line">        <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp%<span class="number">10</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                time++;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp=<span class="built_in">parseInt</span>(tmp/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中的逆序对</title>
      <link href="/2019/08/21/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(35)/"/>
      <url>/2019/08/21/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(35)/</url>
      
        <content type="html"><![CDATA[<h1 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p></blockquote><ul><li>尝试了暴力方法只通过百分之50的用例，显然超时。</li><li>利用归并排序的比较方式，可以找到前面一个数大于后面一个数的逆序对。但是不能影响原数组，所以需要重新开一个数组用来存归并排序的结果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InversePairs</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(!data||data.length&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> copy=data.slice();</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">    count=MergeCount(data,copy,<span class="number">0</span>,data.length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> count%<span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MergeCount</span>(<span class="params">data,copy,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start==end)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> mid=end-start&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> left=MergeCount(copy,data,start,start+mid);</span><br><span class="line">    <span class="keyword">let</span> right=MergeCount(copy,data,start+mid+<span class="number">1</span>,end);</span><br><span class="line">    <span class="keyword">let</span> [p,q,count, copyindex]=[start+mid,end,<span class="number">0</span>,end];</span><br><span class="line">    <span class="keyword">while</span>(p&gt;=start&amp;&amp;q&gt;=start+mid+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[p]&gt;data[q])&#123;</span><br><span class="line">            copy[copyindex--]=data[p--]</span><br><span class="line">            count=count+q-start-mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            copy[copyindex--]=data[q--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p&gt;=start)&#123;</span><br><span class="line">        copy[copyindex--]=data[p--]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q&gt;=start+mid+<span class="number">1</span>)&#123;</span><br><span class="line">        copy[copyindex--]=data[q--]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count+left+right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个排序的链表</title>
      <link href="/2019/08/19/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(16)/"/>
      <url>/2019/08/19/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(16)/</url>
      
        <content type="html"><![CDATA[<h3 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p></blockquote><p>递归做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Merge</span>(<span class="params">pHead1, pHead2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> pmergehead=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(pHead1===<span class="literal">null</span>) <span class="keyword">return</span> pHead2;</span><br><span class="line">    <span class="keyword">if</span>(pHead2===<span class="literal">null</span>) <span class="keyword">return</span> pHead1;</span><br><span class="line">    <span class="keyword">if</span>(pHead1.val&lt;pHead2.val)&#123;</span><br><span class="line">        pmergehead=pHead1;</span><br><span class="line">        pmergehead.next=Merge(pHead1.next,pHead2);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pmergehead=pHead2;</span><br><span class="line">        pmergehead.next=Merge(pHead1,pHead2.next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pmergehead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表中重复的节点</title>
      <link href="/2019/08/19/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(56)/"/>
      <url>/2019/08/19/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(56)/</url>
      
        <content type="html"><![CDATA[<h1 id="删除链表中重复的节点"><a href="#删除链表中重复的节点" class="headerlink" title="删除链表中重复的节点"></a>删除链表中重复的节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p></blockquote><ul><li>注意当第一个节点要被删除的时候，需要一个新的头节点指向</li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDuplication</span>(<span class="params">pHead</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> head=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    head.next=pHead;</span><br><span class="line">    <span class="keyword">let</span> left=head;</span><br><span class="line">    <span class="keyword">let</span> right=head.next;</span><br><span class="line">    <span class="keyword">while</span>(right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(right.next!=<span class="literal">null</span>&amp;&amp;right.next.val==right.val)&#123;</span><br><span class="line">            <span class="keyword">while</span>(right.next!=<span class="literal">null</span>&amp;&amp;right.next.val==right.val)&#123;</span><br><span class="line">                right=right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            left.next=right.next;</span><br><span class="line">            right=right.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left=left.next;</span><br><span class="line">            right=right.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github 博客更新</title>
      <link href="/2019/08/16/hexo+GitHub%20%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/"/>
      <url>/2019/08/16/hexo+GitHub%20%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://goldminerxun.github.io/" target="_blank" rel="noopener">我的GitHub博客</a></p><p>太心酸了。。<br>今天添加了一个浏览量新功能。。<br>千万不要手贱删这删那。<br>如果要更新，就直接在终端打开仓库中hexo文件夹，然后运行hexo命令<br>hexo g<br>hexo d<br>hexo clean<br>hexo d -g<br>本地的GitHub桌面版可以直接拉取。。。。<br>千万！<br>不要删删删。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整数组顺序使奇数位于偶数前面</title>
      <link href="/2019/08/15/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(13)/"/>
      <url>/2019/08/15/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(13)/</url>
      
        <content type="html"><![CDATA[<h3 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reOrderArray</span>(<span class="params">array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> odd=[]</span><br><span class="line">    <span class="keyword">var</span> even=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i]%<span class="number">2</span>)&#123;</span><br><span class="line">            odd.push(array[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            even.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res=odd.concat(even)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值的整数次方</title>
      <link href="/2019/08/15/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88(12)/"/>
      <url>/2019/08/15/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88(12)/</url>
      
        <content type="html"><![CDATA[<h3 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p></blockquote><p>快速幂原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">base, exponent</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here </span></span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> n=exponent;</span><br><span class="line">    <span class="keyword">if</span>(exponent&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(base==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'分母不为零！'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        n=-exponent;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exponent==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n=exponent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            res*=base;</span><br><span class="line">        &#125;</span><br><span class="line">        base*=base;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exponent&gt;<span class="number">0</span>?res:<span class="number">1</span>/res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中倒数第K个节点</title>
      <link href="/2019/08/14/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(14)/"/>
      <url>/2019/08/14/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(14)/</url>
      
        <content type="html"><![CDATA[<h3 id="链表中倒数第K个节点"><a href="#链表中倒数第K个节点" class="headerlink" title="链表中倒数第K个节点"></a>链表中倒数第K个节点</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表，输出该链表中倒数第k个结点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindKthToTail</span>(<span class="params">head, k</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(head===<span class="literal">null</span>||k&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> node1=head;</span><br><span class="line">    <span class="keyword">var</span> node2=head;</span><br><span class="line">    <span class="keyword">while</span>(--k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1.next===<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node1=node1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(node1.next!==<span class="literal">null</span>)&#123;</span><br><span class="line">        node1=node1.next;</span><br><span class="line">        node2=node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> node2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转单词顺序列</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(44)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(44)/</url>
      
        <content type="html"><![CDATA[<h1 id="翻转单词顺序列"><a href="#翻转单词顺序列" class="headerlink" title="翻转单词顺序列"></a>翻转单词顺序列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入 “student. a am I”。<br>把句子单词的顺序翻转后输出正确的句子应该是“I am a student.”。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseSentence</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> strArr=str.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">let</span> corstr=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(str==<span class="literal">null</span>)<span class="keyword">return</span> corstr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=strArr.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            corstr+=strArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            corstr+=strArr[i]+<span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> corstr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孩子们的游戏</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(46)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(46)/</url>
      
        <content type="html"><![CDATA[<h1 id="孩子们的游戏"><a href="#孩子们的游戏" class="headerlink" title="孩子们的游戏"></a>孩子们的游戏</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>约瑟夫环问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LastRemaining_Solution</span>(<span class="params">n, m</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> circle=[]</span><br><span class="line">    <span class="keyword">let</span> del=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||m&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        circle[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(circle.length<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> k=m<span class="number">-1</span>;</span><br><span class="line">        del=(del+k)%circle.length;</span><br><span class="line">        circle.splice(del,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> circle[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从头到尾打印链表</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%EF%BC%883%EF%BC%89/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="从头到尾打印链表"><a href="#从头到尾打印链表" class="headerlink" title="从头到尾打印链表"></a>从头到尾打印链表</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p></blockquote><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> pnode=head;</span><br><span class="line">    <span class="keyword">var</span> res=[]</span><br><span class="line">    <span class="keyword">while</span>(!(pnode==<span class="literal">null</span>))&#123;</span><br><span class="line">        res.unshift(pnode.val);</span><br><span class="line">        pnode=pnode.next;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中重复的数字</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(50)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(50)/</url>
      
        <content type="html"><![CDATA[<h1 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。 </p></blockquote><ul><li>找到第一个重复的数字赋值后就return，反之继续寻找。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicate</span>(<span class="params">numbers, duplication</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="comment">//这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span></span><br><span class="line">    <span class="comment">//函数返回True/False</span></span><br><span class="line">    <span class="keyword">if</span>(numbers.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(duplication.indexOf(numbers[i])!==<span class="number">-1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;numbers.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i]==numbers[j])&#123;</span><br><span class="line">                duplication[<span class="number">0</span>]=numbers[i]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建二叉树</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20%20(4)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20%20(4)/</url>
      
        <content type="html"><![CDATA[<h3 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pre.length==<span class="number">0</span>|| vin.length==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> index = vin.indexOf(pre[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">var</span> left = vin.slice(<span class="number">0</span>,index);</span><br><span class="line">    <span class="keyword">var</span> right=vin.slice(index+<span class="number">1</span>,pre.length);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        val:pre[<span class="number">0</span>],</span><br><span class="line">        left:reConstructBinaryTree(pre.slice(<span class="number">1</span>,index+<span class="number">1</span>),left),</span><br><span class="line">        right:reConstructBinaryTree(pre.slice(index+<span class="number">1</span>),right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续子数组的最大和</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(30)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(30)/</url>
      
        <content type="html"><![CDATA[<h3 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><ul><li>根据一个序列的特点，若前n个数的和小于0，则重新开始一个序列计算和，若大于等于0 ，则继续累加。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindGreatestSumOfSubArray</span>(<span class="params">array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> currsum=array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> maxsum=currsum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(currsum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            currsum=array[i]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            currsum+=array[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(currsum&gt;maxsum)&#123;</span><br><span class="line">            maxsum=currsum;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳台阶</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(8)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(8)/</url>
      
        <content type="html"><![CDATA[<h3 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> n1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> n2=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(--number)&#123;</span><br><span class="line">        n2+=n1;</span><br><span class="line">        n1=n2-n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建乘积数组</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(51)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(51)/</url>
      
        <content type="html"><![CDATA[<h1 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]*A[i+1]</em>…*A[n-1]。不能使用除法。</p></blockquote><ul><li>将数组B元素分隔成前i-1项和后i+1项的乘积</li><li>先算i-1项，后算i+1项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> B=[];</span><br><span class="line">    B[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        B[i]=B[i<span class="number">-1</span>]*array[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=array.length<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        tmp*=array[i+<span class="number">1</span>];</span><br><span class="line">        B[i]*=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树与双向链表</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(26)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(26)/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p></blockquote><ul><li>转换结点，并将pLast指针朝中序遍历（即排序方向）移动。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pRootOfTree===<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> pLast=<span class="literal">null</span>;</span><br><span class="line">    pLast=ConvertNode(pRootOfTree,pLast);</span><br><span class="line">    <span class="keyword">let</span> pHead=pLast;</span><br><span class="line">    <span class="keyword">while</span>(pHead&amp;&amp;pHead.left)&#123;</span><br><span class="line">        pHead=pHead.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConvertNode</span>(<span class="params">pNode,pLast</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pNode===<span class="literal">null</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(pNode.left)&#123;</span><br><span class="line">        pLast=ConvertNode(pNode.left,pLast);</span><br><span class="line">    &#125;</span><br><span class="line">    pNode.left=pLast;</span><br><span class="line">    <span class="keyword">if</span>(pLast)&#123;</span><br><span class="line">        pLast.right=pNode;</span><br><span class="line">    &#125;</span><br><span class="line">    pLast=pNode;</span><br><span class="line">    <span class="keyword">if</span>(pNode.right)&#123;</span><br><span class="line">        pLast=ConvertNode(pNode.right,pLast);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pLast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵中的路径</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(65)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(65)/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bccced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p></blockquote><ul><li>每次都根据一个点，从该点开始遍历是否已遍历的点是否符合被包含字符串，如果不包含则返回上一步并标记该点不符合要求，若回溯到第一点后不符合，则继续从下一点开始。该过程可用递归表示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPath</span>(<span class="params">matrix, rows, cols, path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> pathLength=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> visited=<span class="keyword">new</span> <span class="built_in">Array</span>(rows*cols);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> row=<span class="number">0</span>;row&lt;rows;row++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> col=<span class="number">0</span>;col&lt;cols;col++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( findPath(matrix,rows,cols,row,col,pathLength,visited,path))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPath</span>(<span class="params">matrix,rows,cols,row,col,pathLength,visited,path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> haspath=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(path.length===pathLength)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(row&lt;rows&amp;&amp;</span><br><span class="line">      col&lt;cols&amp;&amp;</span><br><span class="line">      row&gt;=<span class="number">0</span>&amp;&amp;</span><br><span class="line">      col&gt;=<span class="number">0</span>&amp;&amp;</span><br><span class="line">     ( matrix[row*cols+col]===path[pathLength])&amp;&amp;</span><br><span class="line">       !visited[row*cols+col])&#123;</span><br><span class="line">        pathLength++;</span><br><span class="line">        visited[row*cols+col]=<span class="literal">true</span></span><br><span class="line">        haspath=</span><br><span class="line">        findPath(matrix,rows,cols,row+<span class="number">1</span>,col,pathLength,visited,path)||</span><br><span class="line">        findPath(matrix,rows,cols,row<span class="number">-1</span>,col,pathLength,visited,path)||</span><br><span class="line">        findPath(matrix,rows,cols,row,col+<span class="number">1</span>,pathLength,visited,path)||</span><br><span class="line">        findPath(matrix,rows,cols,row,col<span class="number">-1</span>,pathLength,visited,path)</span><br><span class="line">        <span class="keyword">if</span>(!haspath)&#123;</span><br><span class="line">            pathLength--;</span><br><span class="line">            visited[row*cols+col]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> haspath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左旋转字符串</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(43)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(43)/</url>
      
        <content type="html"><![CDATA[<h1 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LeftRotateString</span>(<span class="params">str, n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">let</span> newstrbegin=<span class="string">''</span>,newstrend=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(str==<span class="literal">null</span>)<span class="keyword">return</span> newstrbegin;</span><br><span class="line">    newstrbegin=str.slice(n,str.length);</span><br><span class="line">    newstrend=str.slice(<span class="number">0</span>,n);</span><br><span class="line">    <span class="keyword">return</span> newstrbegin.concat(newstrend);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的压入，弹出序列</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(21)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(21)/</url>
      
        <content type="html"><![CDATA[<h3 id="栈的压入，弹出序列"><a href="#栈的压入，弹出序列" class="headerlink" title="栈的压入，弹出序列"></a>栈的压入，弹出序列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder</span>(<span class="params">pushV, popV</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> res=[]</span><br><span class="line">    <span class="keyword">var</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(pushV.length)&#123;</span><br><span class="line">        res.push(pushV.pop())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(res.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> resv=res.shift();</span><br><span class="line">        <span class="keyword">var</span> popv=popV.shift();</span><br><span class="line">        <span class="keyword">if</span>(resv==popv)&#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按之字形顺序打印二叉树</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(59)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(59)/</url>
      
        <content type="html"><![CDATA[<h1 id="按之字形顺序打印二叉树"><a href="#按之字形顺序打印二叉树" class="headerlink" title="按之字形顺序打印二叉树"></a>按之字形顺序打印二叉树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p></blockquote><ul><li>用两个栈，一个存从左到右的节点，一个存从右到左的节点</li><li>奇数层从左到右打印，偶数层从右到左打印</li><li>每一层单列进list，list再单列进lists</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params">pRoot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> lists=[]</span><br><span class="line">    <span class="keyword">if</span>(pRoot==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> stack1=[]</span><br><span class="line">    <span class="keyword">const</span> stack2=[]</span><br><span class="line">    stack2.push(pRoot);</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(stack1.length!=<span class="number">0</span>||stack2.length!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> list=[]</span><br><span class="line">        <span class="keyword">if</span>((i&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(stack2.length!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> tmp=stack2[stack2.length<span class="number">-1</span>];</span><br><span class="line">            stack2.pop()</span><br><span class="line">            list.push(tmp.val)</span><br><span class="line">            <span class="keyword">if</span>(tmp.left!=<span class="literal">null</span>)stack1.push(tmp.left);</span><br><span class="line">            <span class="keyword">if</span>(tmp.right!=<span class="literal">null</span>)stack1.push(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(stack1.length!=<span class="number">0</span>)&#123;</span><br><span class="line">                 <span class="keyword">const</span> tmp=stack1[stack1.length<span class="number">-1</span>];</span><br><span class="line">            stack1.pop();</span><br><span class="line">            list.push(tmp.val);</span><br><span class="line">            <span class="keyword">if</span>(tmp.right!=<span class="literal">null</span>)stack2.push(tmp.right);</span><br><span class="line">            <span class="keyword">if</span>(tmp.left!=<span class="literal">null</span>)stack2.push(tmp.left);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        lists.push(list)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lists;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小的K个数</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(29)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(29)/</url>
      
        <content type="html"><![CDATA[<h3 id="最小的K个数"><a href="#最小的K个数" class="headerlink" title="最小的K个数"></a>最小的K个数</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入n个整数，找出其中最小的K个数。</p></blockquote><ul><li>基于快排思想的寻找第K大的数。</li><li>快排每一趟可以将a[0]在数组中的位置找到，且其位置左侧均为小于a[0]的数，右侧均为大于a[0]的数</li><li>所以只要找到第K大的数，其左侧则为最小的K个数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetLeastNumbers_Solution</span>(<span class="params">input, k</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> right=input.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">1</span>||input.length===<span class="number">0</span>||k&gt;input.length) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> key=partition(input,left,right);</span><br><span class="line">    <span class="keyword">while</span>(key !== k - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key &gt; k- <span class="number">1</span>)&#123;</span><br><span class="line">            key=partition(input,left,key<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            key=partition(input,key+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res=input.slice(<span class="number">0</span>,key+<span class="number">1</span>);</span><br><span class="line">    res.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr,left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key=arr[left];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(key&lt;=arr[right]&amp;&amp;left&lt;right)&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        [arr[left],arr[right]]=[arr[right],arr[left]];</span><br><span class="line">        <span class="keyword">while</span>(key&gt;=arr[left]&amp;&amp;left&lt;right)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        [arr[left],arr[right]]=[arr[right],arr[left]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React tips</title>
      <link href="/2019/08/13/React%20Tips/"/>
      <url>/2019/08/13/React%20Tips/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在react中使用map函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">numbers</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;numbers&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化二叉树</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(61)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(61)/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请实现两个函数，分别用来序列化和反序列化二叉树</p></blockquote><ul><li>利用数组实现序列化结果，重建过程相当于建树，用前序结果建树。</li><li>递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> arr=[]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Serialize</span>(<span class="params">pRoot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pRoot==<span class="literal">null</span>)&#123;</span><br><span class="line">        arr.push(<span class="string">'#'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        arr.push(pRoot.val)</span><br><span class="line">        Serialize(pRoot.left)</span><br><span class="line">        Serialize(pRoot.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deserialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> node=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> number=arr.shift()</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(number)==<span class="string">'number'</span>)&#123;</span><br><span class="line">        node=<span class="keyword">new</span> TreeNode(number)</span><br><span class="line">        node.left=Deserialize();</span><br><span class="line">        node.right=Deserialize()</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串的排列</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(27)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(27)/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>按字典序输出一个字符串的全排列<br>输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。</p></blockquote><p>要深入理解递归，自身调用自身，分而治之。</p><ul><li>本篇采用的递归全排列方法</li><li>递归首先应该想到，当字符串长度为1 时，其全排列就是其自身。</li><li>字符串长度大于1时，将字符串分割成第一个字符和剩余字符，剩余字符全排列后，再将第一个字符与后面的字符逐个交换。</li><li>值得注意的地方是，每次交换后都应将第一个字符换回原来的位置，以便下一次交换。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Permutation</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> res=[];</span><br><span class="line">    <span class="keyword">if</span>(str.length&lt;=<span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">var</span> arr=str.split(<span class="string">''</span>);</span><br><span class="line">    res=permutation(arr,<span class="number">0</span>,res);</span><br><span class="line">    res=[...new <span class="built_in">Set</span>(res)];</span><br><span class="line">    res.sort();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permutation</span>(<span class="params">arr,index,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length===index)&#123;</span><br><span class="line">        <span class="keyword">var</span> s=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            s+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=index;i&lt;arr.length;i++)&#123;</span><br><span class="line">        [arr[index],arr[i]]=[arr[i],arr[index]];</span><br><span class="line">        permutation(arr,index+<span class="number">1</span>,res);</span><br><span class="line">        [arr[index],arr[i]]=[arr[i],arr[index]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把二叉树打印成多行</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(60)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(60)/</url>
      
        <content type="html"><![CDATA[<h1 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a>把二叉树打印成多行</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>从上层到下层从左到右按层输出二叉树</p></blockquote><ul><li>用队列先进先出的性质，从左到右先遍历下层节点，到下层输出的时候，也可以从左到右输出。</li><li>需要记录下层节点的个数</li><li>需要记录当前层打印节点的个数</li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params">pRoot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> queue=[]</span><br><span class="line">    <span class="keyword">const</span> res=[]</span><br><span class="line">    <span class="keyword">if</span>(pRoot==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nextlevel=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> curlevel=<span class="number">1</span>;</span><br><span class="line">    queue.push(pRoot);</span><br><span class="line">    <span class="keyword">let</span> list=[]</span><br><span class="line">    <span class="keyword">while</span>(queue.length!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> pNode=queue.shift();</span><br><span class="line">        list.push(pNode.val)</span><br><span class="line">        <span class="keyword">if</span>(pNode.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            nextlevel++;</span><br><span class="line">            queue.push(pNode.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pNode.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            nextlevel++;</span><br><span class="line">            queue.push(pNode.right)</span><br><span class="line">        &#125;</span><br><span class="line">        curlevel--;</span><br><span class="line">        <span class="keyword">if</span>(curlevel==<span class="number">0</span>)&#123;</span><br><span class="line">            res.push(list)</span><br><span class="line">            curlevel=nextlevel;</span><br><span class="line">            nextlevel=<span class="number">0</span>;</span><br><span class="line">            list=[];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中只出现一次的数字</title>
      <link href="/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(40)/"/>
      <url>/2019/08/13/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(40)/</url>
      
        <content type="html"><![CDATA[<h1 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p></blockquote><ul><li>先排序，排序后再遍历一遍数组，如果前一个和后一个元素不等，则为出现一次的，注意相等时遍历下标的变化。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindNumsAppearOnce</span>(<span class="params">array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="comment">// return list, 比如[a,b]，其中ab是出现一次的两个数字</span></span><br><span class="line">    <span class="keyword">const</span> list=[];</span><br><span class="line">    array.sort();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i]!=array[i+<span class="number">1</span>])&#123;</span><br><span class="line">            list.push(array[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩形覆盖</title>
      <link href="/2019/08/12/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(10)/"/>
      <url>/2019/08/12/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(10)/</url>
      
        <content type="html"><![CDATA[<h3 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p></blockquote><p>找规律发现其原理和斐波那契数列相符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rectCover</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> g=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> f=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(number==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(--number)&#123;</span><br><span class="line">            f+=g;</span><br><span class="line">            g=f-g;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换空格</title>
      <link href="/2019/08/11/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%EF%BC%882%EF%BC%89/"/>
      <url>/2019/08/11/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p></blockquote><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换空格</span></span><br><span class="line"><span class="comment">// 请实现一个函数，将一个字符串中的每个空格替换成“%20”。</span></span><br><span class="line"><span class="comment">// 例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">string</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> result=string.replace(<span class="regexp">/ /g</span>,<span class="string">'%20'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(replaceSpace(<span class="string">'we are happy'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的深度</title>
      <link href="/2019/08/11/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(38)/"/>
      <url>/2019/08/11/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(38)/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p></blockquote><ul><li>每次都需要比较左子树和右子数的深度，采用递归方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(pRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> leftDepth=TreeDepth(pRoot.left);</span><br><span class="line">    <span class="keyword">const</span> rightDepth=TreeDepth(pRoot.right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftDepth,rightDepth)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中出现次数超过一半的数字</title>
      <link href="/2019/08/10/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%EF%BC%8828%EF%BC%89/"/>
      <url>/2019/08/10/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%EF%BC%8828%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p></blockquote><ul><li>数组中只有两种情况，是这个数字，不是这个数字，且若数字存在，则一定比其余数字出现次数的和大1或者更多，所以设置一个变量times初值为1，除了这个数字以外，其他数字一定会将times减到0，最终这个数字一定会出现。（如果存在的话）</li><li>找到这个出现次数最多的数字，不一定是超过数组长度一半的数字，所以需要再统计该数字出现的次数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoreThanHalfNum_Solution</span>(<span class="params">numbers</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> res=numbers[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> times=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(times===<span class="number">0</span>)&#123;</span><br><span class="line">            res=numbers[i]</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[i]===res)&#123;</span><br><span class="line">            times++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            times--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!countword(numbers,res))&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countword</span>(<span class="params">number,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> time=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;number.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i]===res)</span><br><span class="line">            &#123;</span><br><span class="line">                time++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(time*<span class="number">2</span>&lt;=number.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个链表的第一个公共节点</title>
      <link href="/2019/08/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(36)/"/>
      <url>/2019/08/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(36)/</url>
      
        <content type="html"><![CDATA[<h1 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a>两个链表的第一个公共节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入两个链表，找出它们的第一个公共结点。</p></blockquote><ul><li>从共同节点看，两者最好一起跑，所以需要长链表的指针先跑到和短链表相同长度的地方。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindFirstCommonNode</span>(<span class="params">pHead1, pHead2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> len1=getLen(pHead1);</span><br><span class="line">    <span class="keyword">let</span> len2=getLen(pHead2);</span><br><span class="line">    <span class="keyword">let</span> len,pLong,pShort;</span><br><span class="line">    <span class="keyword">if</span>(len1&gt;len2)&#123;</span><br><span class="line">         len=len1-len2;</span><br><span class="line">         pLong=pHead1;</span><br><span class="line">         pShort=pHead2;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         len=len2-len1;</span><br><span class="line">         pLong=pHead2;</span><br><span class="line">         pShort=pHead1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">        pLong=pLong.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pLong!==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pLong.val==pShort.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> pLong;</span><br><span class="line">        &#125;</span><br><span class="line">        pLong=pLong.next;</span><br><span class="line">        pShort=pShort.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLen</span>(<span class="params">pHead</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pHead!==<span class="literal">null</span>)&#123;</span><br><span class="line">        pHead=pHead.next;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表示数值的字符串</title>
      <link href="/2019/08/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(53)/"/>
      <url>/2019/08/03/%E5%89%91%E6%8C%87offer%20JavaScript%E7%89%88%20(53)/</url>
      
        <content type="html"><![CDATA[<h1 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p></blockquote><ul><li>正则JavaScript</li><li>/正则表达式/</li><li>g 全局匹配</li><li>[+-]? 只出现一次或零次+或-号</li><li>\d* 查找数字出现0次或N次</li><li>match()将匹配的字串找出并返回数组</li><li>search()将匹配的第一个字串找出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumeric</span>(<span class="params">s</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> s.match(<span class="regexp">/[+-]?\d*(\.\d*)?([eE][+-]?\d+)?/g</span>)[<span class="number">0</span>]===s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
